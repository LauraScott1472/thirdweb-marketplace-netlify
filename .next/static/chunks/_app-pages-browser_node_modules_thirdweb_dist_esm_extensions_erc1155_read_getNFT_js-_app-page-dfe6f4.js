"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc1155_read_getNFT_js-_app-page-dfe6f4"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/totalSupply.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/totalSupply.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FN_SELECTOR: function() { return /* binding */ FN_SELECTOR; },\n/* harmony export */   decodeTotalSupplyResult: function() { return /* binding */ decodeTotalSupplyResult; },\n/* harmony export */   encodeTotalSupply: function() { return /* binding */ encodeTotalSupply; },\n/* harmony export */   encodeTotalSupplyParams: function() { return /* binding */ encodeTotalSupplyParams; },\n/* harmony export */   isTotalSupplySupported: function() { return /* binding */ isTotalSupplySupported; },\n/* harmony export */   totalSupply: function() { return /* binding */ totalSupply; }\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/abi/decodeAbiParameters.js\");\n/* harmony import */ var _transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../transaction/read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n/* harmony import */ var _utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../utils/abi/encodeAbiParameters.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/abi/encodeAbiParameters.js\");\n/* harmony import */ var _utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../utils/bytecode/detectExtension.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/detectExtension.js\");\n\n\n\n\nconst FN_SELECTOR = \"0xbd85b039\";\nconst FN_INPUTS = [\n    {\n        name: \"id\",\n        type: \"uint256\",\n    },\n];\nconst FN_OUTPUTS = [\n    {\n        type: \"uint256\",\n    },\n];\n/**\n * Checks if the `totalSupply` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `totalSupply` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isTotalSupplySupported } from \"thirdweb/extensions/erc1155\";\n * const supported = isTotalSupplySupported([\"0x...\"]);\n * ```\n */\nfunction isTotalSupplySupported(availableSelectors) {\n    return (0,_utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__.detectMethod)({\n        availableSelectors,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n    });\n}\n/**\n * Encodes the parameters for the \"totalSupply\" function.\n * @param options - The options for the totalSupply function.\n * @returns The encoded ABI parameters.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeTotalSupplyParams } from \"thirdweb/extensions/erc1155\";\n * const result = encodeTotalSupplyParams({\n *  id: ...,\n * });\n * ```\n */\nfunction encodeTotalSupplyParams(options) {\n    return (0,_utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__.encodeAbiParameters)(FN_INPUTS, [options.id]);\n}\n/**\n * Encodes the \"totalSupply\" function into a Hex string with its parameters.\n * @param options - The options for the totalSupply function.\n * @returns The encoded hexadecimal string.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeTotalSupply } from \"thirdweb/extensions/erc1155\";\n * const result = encodeTotalSupply({\n *  id: ...,\n * });\n * ```\n */\nfunction encodeTotalSupply(options) {\n    // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n    // we can do this because we know the specific formats of the values\n    return (FN_SELECTOR +\n        encodeTotalSupplyParams(options).slice(2));\n}\n/**\n * Decodes the result of the totalSupply function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC1155\n * @example\n * ```ts\n * import { decodeTotalSupplyResult } from \"thirdweb/extensions/erc1155\";\n * const result = decodeTotalSupplyResultResult(\"...\");\n * ```\n */\nfunction decodeTotalSupplyResult(result) {\n    return (0,viem__WEBPACK_IMPORTED_MODULE_2__.decodeAbiParameters)(FN_OUTPUTS, result)[0];\n}\n/**\n * Calls the \"totalSupply\" function on the contract.\n * @param options - The options for the totalSupply function.\n * @returns The parsed result of the function call.\n * @extension ERC1155\n * @example\n * ```ts\n * import { totalSupply } from \"thirdweb/extensions/erc1155\";\n *\n * const result = await totalSupply({\n *  contract,\n *  id: ...,\n * });\n *\n * ```\n */\nasync function totalSupply(options) {\n    return (0,_transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__.readContract)({\n        contract: options.contract,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n        params: [options.id],\n    });\n}\n//# sourceMappingURL=totalSupply.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9leHRlbnNpb25zL2VyYzExNTUvX19nZW5lcmF0ZWRfXy9JRVJDMTE1NS9yZWFkL3RvdGFsU3VwcGx5LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDZ0M7QUFDVztBQUNOO0FBQ3pFO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkseUJBQXlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyxnRkFBWTtBQUN2QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDBCQUEwQjtBQUN0QztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDTztBQUNQLFdBQVcsc0ZBQW1CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksMEJBQTBCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyx5REFBbUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsMkVBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RoaXJkd2ViL2Rpc3QvZXNtL2V4dGVuc2lvbnMvZXJjMTE1NS9fX2dlbmVyYXRlZF9fL0lFUkMxMTU1L3JlYWQvdG90YWxTdXBwbHkuanM/YmU2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWNvZGVBYmlQYXJhbWV0ZXJzIH0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IHJlYWRDb250cmFjdCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi90cmFuc2FjdGlvbi9yZWFkLWNvbnRyYWN0LmpzXCI7XG5pbXBvcnQgeyBlbmNvZGVBYmlQYXJhbWV0ZXJzIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3V0aWxzL2FiaS9lbmNvZGVBYmlQYXJhbWV0ZXJzLmpzXCI7XG5pbXBvcnQgeyBkZXRlY3RNZXRob2QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vdXRpbHMvYnl0ZWNvZGUvZGV0ZWN0RXh0ZW5zaW9uLmpzXCI7XG5leHBvcnQgY29uc3QgRk5fU0VMRUNUT1IgPSBcIjB4YmQ4NWIwMzlcIjtcbmNvbnN0IEZOX0lOUFVUUyA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiaWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgfSxcbl07XG5jb25zdCBGTl9PVVRQVVRTID0gW1xuICAgIHtcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgfSxcbl07XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgYHRvdGFsU3VwcGx5YCBtZXRob2QgaXMgc3VwcG9ydGVkIGJ5IHRoZSBnaXZlbiBjb250cmFjdC5cbiAqIEBwYXJhbSBhdmFpbGFibGVTZWxlY3RvcnMgQW4gYXJyYXkgb2YgNGJ5dGUgZnVuY3Rpb24gc2VsZWN0b3JzIG9mIHRoZSBjb250cmFjdC4gWW91IGNhbiBnZXQgdGhpcyBpbiB2YXJpb3VzIHdheXMsIHN1Y2ggYXMgdXNpbmcgXCJ3aGF0c2FiaVwiIG9yIGlmIHlvdSBoYXZlIHRoZSBBQkkgb2YgdGhlIGNvbnRyYWN0IGF2YWlsYWJsZSB5b3UgY2FuIHVzZSBpdCB0byBnZW5lcmF0ZSB0aGUgc2VsZWN0b3JzLlxuICogQHJldHVybnMgQSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGB0b3RhbFN1cHBseWAgbWV0aG9kIGlzIHN1cHBvcnRlZC5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBpc1RvdGFsU3VwcGx5U3VwcG9ydGVkIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICogY29uc3Qgc3VwcG9ydGVkID0gaXNUb3RhbFN1cHBseVN1cHBvcnRlZChbXCIweC4uLlwiXSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVG90YWxTdXBwbHlTdXBwb3J0ZWQoYXZhaWxhYmxlU2VsZWN0b3JzKSB7XG4gICAgcmV0dXJuIGRldGVjdE1ldGhvZCh7XG4gICAgICAgIGF2YWlsYWJsZVNlbGVjdG9ycyxcbiAgICAgICAgbWV0aG9kOiBbRk5fU0VMRUNUT1IsIEZOX0lOUFVUUywgRk5fT1VUUFVUU10sXG4gICAgfSk7XG59XG4vKipcbiAqIEVuY29kZXMgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBcInRvdGFsU3VwcGx5XCIgZnVuY3Rpb24uXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgdG90YWxTdXBwbHkgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyBUaGUgZW5jb2RlZCBBQkkgcGFyYW1ldGVycy5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBlbmNvZGVUb3RhbFN1cHBseVBhcmFtcyB9IGZyb20gXCJ0aGlyZHdlYi9leHRlbnNpb25zL2VyYzExNTVcIjtcbiAqIGNvbnN0IHJlc3VsdCA9IGVuY29kZVRvdGFsU3VwcGx5UGFyYW1zKHtcbiAqICBpZDogLi4uLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVRvdGFsU3VwcGx5UGFyYW1zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZW5jb2RlQWJpUGFyYW1ldGVycyhGTl9JTlBVVFMsIFtvcHRpb25zLmlkXSk7XG59XG4vKipcbiAqIEVuY29kZXMgdGhlIFwidG90YWxTdXBwbHlcIiBmdW5jdGlvbiBpbnRvIGEgSGV4IHN0cmluZyB3aXRoIGl0cyBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIHRvdGFsU3VwcGx5IGZ1bmN0aW9uLlxuICogQHJldHVybnMgVGhlIGVuY29kZWQgaGV4YWRlY2ltYWwgc3RyaW5nLlxuICogQGV4dGVuc2lvbiBFUkMxMTU1XG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGVuY29kZVRvdGFsU3VwcGx5IH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICogY29uc3QgcmVzdWx0ID0gZW5jb2RlVG90YWxTdXBwbHkoe1xuICogIGlkOiAuLi4sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVG90YWxTdXBwbHkob3B0aW9ucykge1xuICAgIC8vIHdlIGRvIGEgXCJtYW51YWxcIiBjb25jYXQgaGVyZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWQgb2YgdGhlIFwiY29uY2F0SGV4XCIgZnVuY3Rpb25cbiAgICAvLyB3ZSBjYW4gZG8gdGhpcyBiZWNhdXNlIHdlIGtub3cgdGhlIHNwZWNpZmljIGZvcm1hdHMgb2YgdGhlIHZhbHVlc1xuICAgIHJldHVybiAoRk5fU0VMRUNUT1IgK1xuICAgICAgICBlbmNvZGVUb3RhbFN1cHBseVBhcmFtcyhvcHRpb25zKS5zbGljZSgyKSk7XG59XG4vKipcbiAqIERlY29kZXMgdGhlIHJlc3VsdCBvZiB0aGUgdG90YWxTdXBwbHkgZnVuY3Rpb24gY2FsbC5cbiAqIEBwYXJhbSByZXN1bHQgLSBUaGUgaGV4YWRlY2ltYWwgcmVzdWx0IHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHJlc3VsdCBhcyBwZXIgdGhlIEZOX09VVFBVVFMgZGVmaW5pdGlvbi5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBkZWNvZGVUb3RhbFN1cHBseVJlc3VsdCB9IGZyb20gXCJ0aGlyZHdlYi9leHRlbnNpb25zL2VyYzExNTVcIjtcbiAqIGNvbnN0IHJlc3VsdCA9IGRlY29kZVRvdGFsU3VwcGx5UmVzdWx0UmVzdWx0KFwiLi4uXCIpO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGVUb3RhbFN1cHBseVJlc3VsdChyZXN1bHQpIHtcbiAgICByZXR1cm4gZGVjb2RlQWJpUGFyYW1ldGVycyhGTl9PVVRQVVRTLCByZXN1bHQpWzBdO1xufVxuLyoqXG4gKiBDYWxscyB0aGUgXCJ0b3RhbFN1cHBseVwiIGZ1bmN0aW9uIG9uIHRoZSBjb250cmFjdC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSB0b3RhbFN1cHBseSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBwYXJzZWQgcmVzdWx0IG9mIHRoZSBmdW5jdGlvbiBjYWxsLlxuICogQGV4dGVuc2lvbiBFUkMxMTU1XG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IHRvdGFsU3VwcGx5IH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRvdGFsU3VwcGx5KHtcbiAqICBjb250cmFjdCxcbiAqICBpZDogLi4uLFxuICogfSk7XG4gKlxuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0b3RhbFN1cHBseShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHJlYWRDb250cmFjdCh7XG4gICAgICAgIGNvbnRyYWN0OiBvcHRpb25zLmNvbnRyYWN0LFxuICAgICAgICBtZXRob2Q6IFtGTl9TRUxFQ1RPUiwgRk5fSU5QVVRTLCBGTl9PVVRQVVRTXSxcbiAgICAgICAgcGFyYW1zOiBbb3B0aW9ucy5pZF0sXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b3RhbFN1cHBseS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/totalSupply.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/uri.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/uri.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FN_SELECTOR: function() { return /* binding */ FN_SELECTOR; },\n/* harmony export */   decodeUriResult: function() { return /* binding */ decodeUriResult; },\n/* harmony export */   encodeUri: function() { return /* binding */ encodeUri; },\n/* harmony export */   encodeUriParams: function() { return /* binding */ encodeUriParams; },\n/* harmony export */   isUriSupported: function() { return /* binding */ isUriSupported; },\n/* harmony export */   uri: function() { return /* binding */ uri; }\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/abi/decodeAbiParameters.js\");\n/* harmony import */ var _transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../transaction/read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n/* harmony import */ var _utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../utils/abi/encodeAbiParameters.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/abi/encodeAbiParameters.js\");\n/* harmony import */ var _utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../utils/bytecode/detectExtension.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/detectExtension.js\");\n\n\n\n\nconst FN_SELECTOR = \"0x0e89341c\";\nconst FN_INPUTS = [\n    {\n        name: \"tokenId\",\n        type: \"uint256\",\n    },\n];\nconst FN_OUTPUTS = [\n    {\n        type: \"string\",\n    },\n];\n/**\n * Checks if the `uri` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `uri` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isUriSupported } from \"thirdweb/extensions/erc1155\";\n * const supported = isUriSupported([\"0x...\"]);\n * ```\n */\nfunction isUriSupported(availableSelectors) {\n    return (0,_utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__.detectMethod)({\n        availableSelectors,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n    });\n}\n/**\n * Encodes the parameters for the \"uri\" function.\n * @param options - The options for the uri function.\n * @returns The encoded ABI parameters.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeUriParams } from \"thirdweb/extensions/erc1155\";\n * const result = encodeUriParams({\n *  tokenId: ...,\n * });\n * ```\n */\nfunction encodeUriParams(options) {\n    return (0,_utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__.encodeAbiParameters)(FN_INPUTS, [options.tokenId]);\n}\n/**\n * Encodes the \"uri\" function into a Hex string with its parameters.\n * @param options - The options for the uri function.\n * @returns The encoded hexadecimal string.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeUri } from \"thirdweb/extensions/erc1155\";\n * const result = encodeUri({\n *  tokenId: ...,\n * });\n * ```\n */\nfunction encodeUri(options) {\n    // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n    // we can do this because we know the specific formats of the values\n    return (FN_SELECTOR +\n        encodeUriParams(options).slice(2));\n}\n/**\n * Decodes the result of the uri function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC1155\n * @example\n * ```ts\n * import { decodeUriResult } from \"thirdweb/extensions/erc1155\";\n * const result = decodeUriResultResult(\"...\");\n * ```\n */\nfunction decodeUriResult(result) {\n    return (0,viem__WEBPACK_IMPORTED_MODULE_2__.decodeAbiParameters)(FN_OUTPUTS, result)[0];\n}\n/**\n * Calls the \"uri\" function on the contract.\n * @param options - The options for the uri function.\n * @returns The parsed result of the function call.\n * @extension ERC1155\n * @example\n * ```ts\n * import { uri } from \"thirdweb/extensions/erc1155\";\n *\n * const result = await uri({\n *  contract,\n *  tokenId: ...,\n * });\n *\n * ```\n */\nasync function uri(options) {\n    return (0,_transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__.readContract)({\n        contract: options.contract,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n        params: [options.tokenId],\n    });\n}\n//# sourceMappingURL=uri.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9leHRlbnNpb25zL2VyYzExNTUvX19nZW5lcmF0ZWRfXy9JRVJDMTE1NS9yZWFkL3VyaS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQTJDO0FBQ2dDO0FBQ1c7QUFDTjtBQUN6RTtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlCQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDTztBQUNQLFdBQVcsZ0ZBQVk7QUFDdkI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ087QUFDUCxXQUFXLHNGQUFtQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLHlEQUFtQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVywyRUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vZXh0ZW5zaW9ucy9lcmMxMTU1L19fZ2VuZXJhdGVkX18vSUVSQzExNTUvcmVhZC91cmkuanM/MDY3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWNvZGVBYmlQYXJhbWV0ZXJzIH0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IHJlYWRDb250cmFjdCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi90cmFuc2FjdGlvbi9yZWFkLWNvbnRyYWN0LmpzXCI7XG5pbXBvcnQgeyBlbmNvZGVBYmlQYXJhbWV0ZXJzIH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3V0aWxzL2FiaS9lbmNvZGVBYmlQYXJhbWV0ZXJzLmpzXCI7XG5pbXBvcnQgeyBkZXRlY3RNZXRob2QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vdXRpbHMvYnl0ZWNvZGUvZGV0ZWN0RXh0ZW5zaW9uLmpzXCI7XG5leHBvcnQgY29uc3QgRk5fU0VMRUNUT1IgPSBcIjB4MGU4OTM0MWNcIjtcbmNvbnN0IEZOX0lOUFVUUyA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6IFwidG9rZW5JZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICB9LFxuXTtcbmNvbnN0IEZOX09VVFBVVFMgPSBbXG4gICAge1xuICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIH0sXG5dO1xuLyoqXG4gKiBDaGVja3MgaWYgdGhlIGB1cmlgIG1ldGhvZCBpcyBzdXBwb3J0ZWQgYnkgdGhlIGdpdmVuIGNvbnRyYWN0LlxuICogQHBhcmFtIGF2YWlsYWJsZVNlbGVjdG9ycyBBbiBhcnJheSBvZiA0Ynl0ZSBmdW5jdGlvbiBzZWxlY3RvcnMgb2YgdGhlIGNvbnRyYWN0LiBZb3UgY2FuIGdldCB0aGlzIGluIHZhcmlvdXMgd2F5cywgc3VjaCBhcyB1c2luZyBcIndoYXRzYWJpXCIgb3IgaWYgeW91IGhhdmUgdGhlIEFCSSBvZiB0aGUgY29udHJhY3QgYXZhaWxhYmxlIHlvdSBjYW4gdXNlIGl0IHRvIGdlbmVyYXRlIHRoZSBzZWxlY3RvcnMuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgYHVyaWAgbWV0aG9kIGlzIHN1cHBvcnRlZC5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBpc1VyaVN1cHBvcnRlZCB9IGZyb20gXCJ0aGlyZHdlYi9leHRlbnNpb25zL2VyYzExNTVcIjtcbiAqIGNvbnN0IHN1cHBvcnRlZCA9IGlzVXJpU3VwcG9ydGVkKFtcIjB4Li4uXCJdKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNVcmlTdXBwb3J0ZWQoYXZhaWxhYmxlU2VsZWN0b3JzKSB7XG4gICAgcmV0dXJuIGRldGVjdE1ldGhvZCh7XG4gICAgICAgIGF2YWlsYWJsZVNlbGVjdG9ycyxcbiAgICAgICAgbWV0aG9kOiBbRk5fU0VMRUNUT1IsIEZOX0lOUFVUUywgRk5fT1VUUFVUU10sXG4gICAgfSk7XG59XG4vKipcbiAqIEVuY29kZXMgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBcInVyaVwiIGZ1bmN0aW9uLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIHVyaSBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBlbmNvZGVkIEFCSSBwYXJhbWV0ZXJzLlxuICogQGV4dGVuc2lvbiBFUkMxMTU1XG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGVuY29kZVVyaVBhcmFtcyB9IGZyb20gXCJ0aGlyZHdlYi9leHRlbnNpb25zL2VyYzExNTVcIjtcbiAqIGNvbnN0IHJlc3VsdCA9IGVuY29kZVVyaVBhcmFtcyh7XG4gKiAgdG9rZW5JZDogLi4uLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZVVyaVBhcmFtcyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIGVuY29kZUFiaVBhcmFtZXRlcnMoRk5fSU5QVVRTLCBbb3B0aW9ucy50b2tlbklkXSk7XG59XG4vKipcbiAqIEVuY29kZXMgdGhlIFwidXJpXCIgZnVuY3Rpb24gaW50byBhIEhleCBzdHJpbmcgd2l0aCBpdHMgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSB1cmkgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyBUaGUgZW5jb2RlZCBoZXhhZGVjaW1hbCBzdHJpbmcuXG4gKiBAZXh0ZW5zaW9uIEVSQzExNTVcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZW5jb2RlVXJpIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICogY29uc3QgcmVzdWx0ID0gZW5jb2RlVXJpKHtcbiAqICB0b2tlbklkOiAuLi4sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlVXJpKG9wdGlvbnMpIHtcbiAgICAvLyB3ZSBkbyBhIFwibWFudWFsXCIgY29uY2F0IGhlcmUgdG8gYXZvaWQgdGhlIG92ZXJoZWFkIG9mIHRoZSBcImNvbmNhdEhleFwiIGZ1bmN0aW9uXG4gICAgLy8gd2UgY2FuIGRvIHRoaXMgYmVjYXVzZSB3ZSBrbm93IHRoZSBzcGVjaWZpYyBmb3JtYXRzIG9mIHRoZSB2YWx1ZXNcbiAgICByZXR1cm4gKEZOX1NFTEVDVE9SICtcbiAgICAgICAgZW5jb2RlVXJpUGFyYW1zKG9wdGlvbnMpLnNsaWNlKDIpKTtcbn1cbi8qKlxuICogRGVjb2RlcyB0aGUgcmVzdWx0IG9mIHRoZSB1cmkgZnVuY3Rpb24gY2FsbC5cbiAqIEBwYXJhbSByZXN1bHQgLSBUaGUgaGV4YWRlY2ltYWwgcmVzdWx0IHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHJlc3VsdCBhcyBwZXIgdGhlIEZOX09VVFBVVFMgZGVmaW5pdGlvbi5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBkZWNvZGVVcmlSZXN1bHQgfSBmcm9tIFwidGhpcmR3ZWIvZXh0ZW5zaW9ucy9lcmMxMTU1XCI7XG4gKiBjb25zdCByZXN1bHQgPSBkZWNvZGVVcmlSZXN1bHRSZXN1bHQoXCIuLi5cIik7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZVVyaVJlc3VsdChyZXN1bHQpIHtcbiAgICByZXR1cm4gZGVjb2RlQWJpUGFyYW1ldGVycyhGTl9PVVRQVVRTLCByZXN1bHQpWzBdO1xufVxuLyoqXG4gKiBDYWxscyB0aGUgXCJ1cmlcIiBmdW5jdGlvbiBvbiB0aGUgY29udHJhY3QuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIGZvciB0aGUgdXJpIGZ1bmN0aW9uLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCByZXN1bHQgb2YgdGhlIGZ1bmN0aW9uIGNhbGwuXG4gKiBAZXh0ZW5zaW9uIEVSQzExNTVcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgdXJpIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHVyaSh7XG4gKiAgY29udHJhY3QsXG4gKiAgdG9rZW5JZDogLi4uLFxuICogfSk7XG4gKlxuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cmkob3B0aW9ucykge1xuICAgIHJldHVybiByZWFkQ29udHJhY3Qoe1xuICAgICAgICBjb250cmFjdDogb3B0aW9ucy5jb250cmFjdCxcbiAgICAgICAgbWV0aG9kOiBbRk5fU0VMRUNUT1IsIEZOX0lOUFVUUywgRk5fT1VUUFVUU10sXG4gICAgICAgIHBhcmFtczogW29wdGlvbnMudG9rZW5JZF0sXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/uri.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/read/getNFT.js":
/*!**************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/extensions/erc1155/read/getNFT.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getNFT: function() { return /* binding */ getNFT; },\n/* harmony export */   isGetNFTSupported: function() { return /* reexport safe */ _generated_IERC1155_read_uri_js__WEBPACK_IMPORTED_MODULE_0__.isUriSupported; }\n/* harmony export */ });\n/* harmony import */ var _insight_get_nfts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../insight/get-nfts.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/insight/get-nfts.js\");\n/* harmony import */ var _utils_nft_fetchTokenMetadata_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../utils/nft/fetchTokenMetadata.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/nft/fetchTokenMetadata.js\");\n/* harmony import */ var _utils_nft_parseNft_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/nft/parseNft.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/nft/parseNft.js\");\n/* harmony import */ var _generated_IERC1155_read_totalSupply_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../__generated__/IERC1155/read/totalSupply.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/totalSupply.js\");\n/* harmony import */ var _generated_IERC1155_read_uri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../__generated__/IERC1155/read/uri.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/uri.js\");\n\n\n\n\n\n\n/**\n * Retrieves information about a specific ERC1155 non-fungible token (NFT).\n * @param options - The options for retrieving the NFT.\n * @returns A promise that resolves to the NFT object.\n * @extension ERC1155\n * @example\n * ```ts\n * import { getNFT } from \"thirdweb/extensions/erc1155\";\n * const nft = await getNFT({\n *  contract,\n *  tokenId: 1n,\n * });\n * ```\n */\nasync function getNFT(options) {\n    const { useIndexer = true } = options;\n    if (useIndexer) {\n        try {\n            return await getNFTFromInsight(options);\n        }\n        catch {\n            return await getNFTFromRPC(options);\n        }\n    }\n    return await getNFTFromRPC(options);\n}\nasync function getNFTFromInsight(options) {\n    const nft = await (0,_insight_get_nfts_js__WEBPACK_IMPORTED_MODULE_1__.getNFT)({\n        chain: options.contract.chain,\n        client: options.contract.client,\n        contractAddress: options.contract.address,\n        tokenId: options.tokenId,\n    });\n    if (!nft) {\n        // fresh contracts might be delayed in indexing, so we fallback to RPC\n        return getNFTFromRPC(options);\n    }\n    return nft;\n}\nasync function getNFTFromRPC(options) {\n    const [tokenUri, supply] = await Promise.all([\n        (0,_generated_IERC1155_read_uri_js__WEBPACK_IMPORTED_MODULE_0__.uri)({\n            contract: options.contract,\n            tokenId: options.tokenId,\n        }),\n        (0,_generated_IERC1155_read_totalSupply_js__WEBPACK_IMPORTED_MODULE_2__.totalSupply)({\n            contract: options.contract,\n            id: options.tokenId,\n            // in cases where the supply is not available -> fall back to 0\n        }).catch(() => 0n),\n    ]);\n    return (0,_utils_nft_parseNft_js__WEBPACK_IMPORTED_MODULE_3__.parseNFT)(await (0,_utils_nft_fetchTokenMetadata_js__WEBPACK_IMPORTED_MODULE_4__.fetchTokenMetadata)({\n        client: options.contract.client,\n        tokenId: options.tokenId,\n        tokenUri,\n    }).catch(() => ({\n        id: options.tokenId,\n        type: \"ERC1155\",\n        uri: tokenUri,\n    })), {\n        chainId: options.contract.chain.id,\n        owner: null,\n        supply,\n        tokenAddress: options.contract.address,\n        tokenId: options.tokenId,\n        tokenUri,\n        type: \"ERC1155\",\n    });\n}\n//# sourceMappingURL=getNFT.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9leHRlbnNpb25zL2VyYzExNTUvcmVhZC9nZXRORlQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF1RTtBQUNPO0FBQ3BCO0FBQ2tCO0FBQ2hCO0FBQ2dDO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ087QUFDUCxZQUFZLG9CQUFvQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDREQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLG9FQUFHO0FBQ1g7QUFDQTtBQUNBLFNBQVM7QUFDVCxRQUFRLG9GQUFXO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFdBQVcsZ0VBQVEsT0FBTyxvRkFBa0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9leHRlbnNpb25zL2VyYzExNTUvcmVhZC9nZXRORlQuanM/N2QyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRORlQgYXMgZ2V0TkZUSW5zaWdodCB9IGZyb20gXCIuLi8uLi8uLi9pbnNpZ2h0L2dldC1uZnRzLmpzXCI7XG5pbXBvcnQgeyBmZXRjaFRva2VuTWV0YWRhdGEgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvbmZ0L2ZldGNoVG9rZW5NZXRhZGF0YS5qc1wiO1xuaW1wb3J0IHsgcGFyc2VORlQgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvbmZ0L3BhcnNlTmZ0LmpzXCI7XG5pbXBvcnQgeyB0b3RhbFN1cHBseSB9IGZyb20gXCIuLi9fX2dlbmVyYXRlZF9fL0lFUkMxMTU1L3JlYWQvdG90YWxTdXBwbHkuanNcIjtcbmltcG9ydCB7IHVyaSB9IGZyb20gXCIuLi9fX2dlbmVyYXRlZF9fL0lFUkMxMTU1L3JlYWQvdXJpLmpzXCI7XG5leHBvcnQgeyBpc1VyaVN1cHBvcnRlZCBhcyBpc0dldE5GVFN1cHBvcnRlZCB9IGZyb20gXCIuLi9fX2dlbmVyYXRlZF9fL0lFUkMxMTU1L3JlYWQvdXJpLmpzXCI7XG4vKipcbiAqIFJldHJpZXZlcyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIEVSQzExNTUgbm9uLWZ1bmdpYmxlIHRva2VuIChORlQpLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgcmV0cmlldmluZyB0aGUgTkZULlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIE5GVCBvYmplY3QuXG4gKiBAZXh0ZW5zaW9uIEVSQzExNTVcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZ2V0TkZUIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICogY29uc3QgbmZ0ID0gYXdhaXQgZ2V0TkZUKHtcbiAqICBjb250cmFjdCxcbiAqICB0b2tlbklkOiAxbixcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRORlQob3B0aW9ucykge1xuICAgIGNvbnN0IHsgdXNlSW5kZXhlciA9IHRydWUgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHVzZUluZGV4ZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBnZXRORlRGcm9tSW5zaWdodChvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgZ2V0TkZURnJvbVJQQyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgZ2V0TkZURnJvbVJQQyhvcHRpb25zKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldE5GVEZyb21JbnNpZ2h0KG9wdGlvbnMpIHtcbiAgICBjb25zdCBuZnQgPSBhd2FpdCBnZXRORlRJbnNpZ2h0KHtcbiAgICAgICAgY2hhaW46IG9wdGlvbnMuY29udHJhY3QuY2hhaW4sXG4gICAgICAgIGNsaWVudDogb3B0aW9ucy5jb250cmFjdC5jbGllbnQsXG4gICAgICAgIGNvbnRyYWN0QWRkcmVzczogb3B0aW9ucy5jb250cmFjdC5hZGRyZXNzLFxuICAgICAgICB0b2tlbklkOiBvcHRpb25zLnRva2VuSWQsXG4gICAgfSk7XG4gICAgaWYgKCFuZnQpIHtcbiAgICAgICAgLy8gZnJlc2ggY29udHJhY3RzIG1pZ2h0IGJlIGRlbGF5ZWQgaW4gaW5kZXhpbmcsIHNvIHdlIGZhbGxiYWNrIHRvIFJQQ1xuICAgICAgICByZXR1cm4gZ2V0TkZURnJvbVJQQyhvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIG5mdDtcbn1cbmFzeW5jIGZ1bmN0aW9uIGdldE5GVEZyb21SUEMob3B0aW9ucykge1xuICAgIGNvbnN0IFt0b2tlblVyaSwgc3VwcGx5XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgdXJpKHtcbiAgICAgICAgICAgIGNvbnRyYWN0OiBvcHRpb25zLmNvbnRyYWN0LFxuICAgICAgICAgICAgdG9rZW5JZDogb3B0aW9ucy50b2tlbklkLFxuICAgICAgICB9KSxcbiAgICAgICAgdG90YWxTdXBwbHkoe1xuICAgICAgICAgICAgY29udHJhY3Q6IG9wdGlvbnMuY29udHJhY3QsXG4gICAgICAgICAgICBpZDogb3B0aW9ucy50b2tlbklkLFxuICAgICAgICAgICAgLy8gaW4gY2FzZXMgd2hlcmUgdGhlIHN1cHBseSBpcyBub3QgYXZhaWxhYmxlIC0+IGZhbGwgYmFjayB0byAwXG4gICAgICAgIH0pLmNhdGNoKCgpID0+IDBuKSxcbiAgICBdKTtcbiAgICByZXR1cm4gcGFyc2VORlQoYXdhaXQgZmV0Y2hUb2tlbk1ldGFkYXRhKHtcbiAgICAgICAgY2xpZW50OiBvcHRpb25zLmNvbnRyYWN0LmNsaWVudCxcbiAgICAgICAgdG9rZW5JZDogb3B0aW9ucy50b2tlbklkLFxuICAgICAgICB0b2tlblVyaSxcbiAgICB9KS5jYXRjaCgoKSA9PiAoe1xuICAgICAgICBpZDogb3B0aW9ucy50b2tlbklkLFxuICAgICAgICB0eXBlOiBcIkVSQzExNTVcIixcbiAgICAgICAgdXJpOiB0b2tlblVyaSxcbiAgICB9KSksIHtcbiAgICAgICAgY2hhaW5JZDogb3B0aW9ucy5jb250cmFjdC5jaGFpbi5pZCxcbiAgICAgICAgb3duZXI6IG51bGwsXG4gICAgICAgIHN1cHBseSxcbiAgICAgICAgdG9rZW5BZGRyZXNzOiBvcHRpb25zLmNvbnRyYWN0LmFkZHJlc3MsXG4gICAgICAgIHRva2VuSWQ6IG9wdGlvbnMudG9rZW5JZCxcbiAgICAgICAgdG9rZW5VcmksXG4gICAgICAgIHR5cGU6IFwiRVJDMTE1NVwiLFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0TkZULmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/read/getNFT.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/insight/get-nfts.js":
/*!************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/insight/get-nfts.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getContractNFTs: function() { return /* binding */ getContractNFTs; },\n/* harmony export */   getNFT: function() { return /* binding */ getNFT; },\n/* harmony export */   getOwnedNFTs: function() { return /* binding */ getOwnedNFTs; }\n/* harmony export */ });\n/* harmony import */ var _chains_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chains/utils.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/chains/utils.js\");\n/* harmony import */ var _contract_contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../contract/contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/contract/contract.js\");\n/* harmony import */ var _utils_address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/address.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/address.js\");\n\n\n\n/**\n * Get NFTs owned by an address\n * @example\n * ```ts\n * import { Insight } from \"thirdweb\";\n *\n * const nfts = await Insight.getOwnedNFTs({\n *   client,\n *   chains: [sepolia],\n *   ownerAddress: \"0x1234567890123456789012345678901234567890\",\n * });\n * ```\n * @insight\n */\nasync function getOwnedNFTs(args) {\n    const [{ getV1Nfts }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify },] = await Promise.all([\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb-dev_insight_dist_esm_exports_thirdweb_js\").then(__webpack_require__.bind(__webpack_require__, /*! @thirdweb-dev/insight */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/insight/dist/esm/exports/thirdweb.js\")),\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/domains.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/domains.js\")),\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/fetch.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/fetch.js\")),\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_insight_common_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./common.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/insight/common.js\")),\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_viem__esm_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/index.js\")),\n    ]);\n    const { client, chains, ownerAddress, contractAddresses, queryOptions } = args;\n    await assertInsightEnabled(chains);\n    const defaultQueryOptions = {\n        chain: chains.map((chain) => chain.id),\n        // metadata: includeMetadata ? \"true\" : \"false\", TODO (insight): add support for this\n        limit: 50,\n        owner_address: [ownerAddress],\n        contract_address: contractAddresses ? contractAddresses : undefined,\n    };\n    const result = await getV1Nfts({\n        baseUrl: `https://${getThirdwebDomains().insight}`,\n        fetch: getClientFetch(client),\n        query: {\n            ...defaultQueryOptions,\n            ...queryOptions,\n        },\n    });\n    if (result.error) {\n        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : \"Unknown error\"}`);\n    }\n    const transformedNfts = await transformNFTModel(result.data?.data ?? [], client, ownerAddress);\n    return transformedNfts.map((nft) => ({\n        ...nft,\n        quantityOwned: nft.quantityOwned ?? 1n,\n    }));\n}\n/**\n * Get all NFTs from a contract\n * @example\n * ```ts\n * import { Insight } from \"thirdweb\";\n *\n * const nfts = await Insight.getContractNFTs({\n *   client,\n *   chains: [sepolia],\n *   contractAddress: \"0x1234567890123456789012345678901234567890\",\n * });\n * ```\n * @insight\n */\nasync function getContractNFTs(args) {\n    const [{ getV1NftsByContractAddress }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify },] = await Promise.all([\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb-dev_insight_dist_esm_exports_thirdweb_js\").then(__webpack_require__.bind(__webpack_require__, /*! @thirdweb-dev/insight */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/insight/dist/esm/exports/thirdweb.js\")),\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/domains.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/domains.js\")),\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/fetch.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/fetch.js\")),\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_insight_common_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./common.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/insight/common.js\")),\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/json.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/json.js\")),\n    ]);\n    const { client, chains, contractAddress, includeOwners = true, queryOptions, } = args;\n    const defaultQueryOptions = {\n        chain: chains.map((chain) => chain.id),\n        include_owners: includeOwners === true ? \"true\" : \"false\",\n        // metadata: includeMetadata ? \"true\" : \"false\", TODO (insight): add support for this\n        limit: 50,\n    };\n    await assertInsightEnabled(chains);\n    const result = await getV1NftsByContractAddress({\n        baseUrl: `https://${getThirdwebDomains().insight}`,\n        fetch: getClientFetch(client),\n        path: {\n            contract_address: contractAddress,\n        },\n        query: {\n            ...defaultQueryOptions,\n            ...queryOptions,\n        },\n    });\n    if (result.error) {\n        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : \"Unknown error\"}`);\n    }\n    return transformNFTModel(result.data?.data ?? [], client);\n}\n/**\n * Get NFT metadata by contract address and token id\n * @example\n * ```ts\n * import { Insight } from \"thirdweb\";\n *\n * const nft = await Insight.getNFT({\n *   client,\n *   chain: sepolia,\n *   contractAddress: \"0x1234567890123456789012345678901234567890\",\n *   tokenId: 1n,\n * });\n * ```\n * @insight\n */\nasync function getNFT(args) {\n    const [{ getV1NftsByContractAddressByTokenId }, { getThirdwebDomains }, { getClientFetch }, { assertInsightEnabled }, { stringify },] = await Promise.all([\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb-dev_insight_dist_esm_exports_thirdweb_js\").then(__webpack_require__.bind(__webpack_require__, /*! @thirdweb-dev/insight */ \"(app-pages-browser)/./node_modules/@thirdweb-dev/insight/dist/esm/exports/thirdweb.js\")),\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/domains.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/domains.js\")),\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/fetch.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/fetch.js\")),\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_insight_common_js\").then(__webpack_require__.bind(__webpack_require__, /*! ./common.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/insight/common.js\")),\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/json.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/json.js\")),\n    ]);\n    const { client, chain, contractAddress, tokenId, includeOwners = true, queryOptions, } = args;\n    await assertInsightEnabled([chain]);\n    const defaultQueryOptions = {\n        chain_id: [chain.id],\n        include_owners: includeOwners === true ? \"true\" : \"false\",\n    };\n    const result = await getV1NftsByContractAddressByTokenId({\n        baseUrl: `https://${getThirdwebDomains().insight}`,\n        fetch: getClientFetch(client),\n        path: {\n            contract_address: contractAddress,\n            token_id: tokenId.toString(),\n        },\n        query: {\n            ...defaultQueryOptions,\n            ...queryOptions,\n        },\n    });\n    if (result.error) {\n        throw new Error(`${result.response.status} ${result.response.statusText} - ${result.error ? stringify(result.error) : \"Unknown error\"}`);\n    }\n    const transformedNfts = await transformNFTModel(result.data?.data ?? [], client);\n    return transformedNfts?.[0];\n}\nasync function transformNFTModel(nfts, client, ownerAddress) {\n    const [{ parseNFT }, { totalSupply }] = await Promise.all([\n        Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../utils/nft/parseNft.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/nft/parseNft.js\")),\n        __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc1155___generated___IERC1155_r-8ba7b9\").then(__webpack_require__.bind(__webpack_require__, /*! ../extensions/erc1155/__generated__/IERC1155/read/totalSupply.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IERC1155/read/totalSupply.js\")),\n    ]);\n    return await Promise.all(nfts.map(async (nft) => {\n        let parsedNft;\n        const { contract, \n        // biome-ignore lint/correctness/noUnusedVariables: explicitly unused to not include it in the resulting metadata\n        extra_metadata, \n        // biome-ignore lint/correctness/noUnusedVariables: explicitly unused to not include it in the resulting metadata\n        collection, metadata_url, \n        // biome-ignore lint/correctness/noUnusedVariables: explicitly unused to not include it in the resulting metadata\n        chain_id, token_id, \n        // biome-ignore lint/correctness/noUnusedVariables: explicitly unused to not include it in the resulting metadata\n        status, balance, \n        // biome-ignore lint/correctness/noUnusedVariables: explicitly unused to not include it in the resulting metadata\n        token_type, ...rest } = nft;\n        let metadataToUse = rest;\n        let owners = ownerAddress\n            ? [(0,_utils_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(ownerAddress)]\n            : undefined;\n        if (\"owner_addresses\" in rest) {\n            const { owner_addresses, ...restWithoutOwnerAddresses } = rest;\n            metadataToUse = restWithoutOwnerAddresses;\n            owners = owners ?? owner_addresses?.map((o) => (0,_utils_address_js__WEBPACK_IMPORTED_MODULE_0__.getAddress)(o));\n        }\n        const metadata = replaceIPFSGatewayRecursively({\n            attributes: nft.extra_metadata?.attributes ?? undefined,\n            image: nft.image_url,\n            uri: nft.metadata_url ?? \"\",\n            ...metadataToUse,\n        });\n        if (contract?.type === \"erc1155\") {\n            // TODO (insight): this needs to be added in the API\n            const supply = await totalSupply({\n                contract: (0,_contract_contract_js__WEBPACK_IMPORTED_MODULE_1__.getContract)({\n                    address: contract.address,\n                    chain: (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_2__.getCachedChain)(contract.chain_id),\n                    client: client,\n                }),\n                id: BigInt(token_id),\n            }).catch(() => 0n);\n            parsedNft = parseNFT(metadata, {\n                chainId: contract?.chain_id ?? 0,\n                owner: owners?.[0],\n                supply: supply,\n                tokenAddress: contract?.address ?? \"\",\n                tokenId: BigInt(token_id),\n                tokenUri: replaceIPFSGateway(metadata_url) ?? \"\",\n                type: \"ERC1155\",\n            });\n        }\n        else {\n            parsedNft = parseNFT(metadata, {\n                chainId: contract?.chain_id ?? 0,\n                owner: owners?.[0],\n                tokenAddress: contract?.address ?? \"\",\n                tokenId: BigInt(token_id),\n                tokenUri: replaceIPFSGateway(metadata_url) ?? \"\",\n                type: \"ERC721\",\n            });\n        }\n        return {\n            ...parsedNft,\n            ...(contract?.type === \"erc1155\"\n                ? { quantityOwned: balance ? BigInt(balance) : undefined }\n                : {}),\n        };\n    }));\n}\n// biome-ignore lint/suspicious/noExplicitAny: this should be fixed in the API\nfunction replaceIPFSGatewayRecursively(obj) {\n    if (typeof obj !== \"object\" || obj === null) {\n        return obj;\n    }\n    for (const key in obj) {\n        if (typeof obj[key] === \"string\") {\n            obj[key] = replaceIPFSGateway(obj[key]);\n        }\n        else {\n            replaceIPFSGatewayRecursively(obj[key]);\n        }\n    }\n    return obj;\n}\nfunction replaceIPFSGateway(url) {\n    if (!url || typeof url !== \"string\") {\n        return url;\n    }\n    try {\n        const parsedUrl = new URL(url);\n        if (parsedUrl.host.endsWith(\".ipfscdn.io\")) {\n            const paths = parsedUrl.pathname.split(\"/\");\n            const index = paths.findIndex((path) => path === \"ipfs\");\n            if (index === -1) {\n                return url;\n            }\n            const ipfsHash = paths.slice(index + 1).join(\"/\");\n            if (ipfsHash) {\n                return `ipfs://${ipfsHash}`;\n            }\n            return url;\n        }\n    }\n    catch {\n        // If the URL is invalid, return it as is\n        return url;\n    }\n    return url;\n}\n//# sourceMappingURL=get-nfts.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9pbnNpZ2h0L2dldC1uZnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFvRDtBQUNFO0FBQ0w7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDTztBQUNQLGFBQWEsV0FBVyxJQUFJLG9CQUFvQixJQUFJLGdCQUFnQixJQUFJLHNCQUFzQixJQUFJLFdBQVc7QUFDN0csUUFBUSxvU0FBK0I7QUFDdkMsUUFBUSx3TEFBNkI7QUFDckMsUUFBUSxvTEFBMkI7QUFDbkMsUUFBUSw2UEFBcUI7QUFDN0IsUUFBUSxvTkFBYztBQUN0QjtBQUNBLFlBQVksZ0VBQWdFO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw2QkFBNkI7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsMkJBQTJCLHdCQUF3QixFQUFFLDRCQUE0QixJQUFJLHlEQUF5RDtBQUM5STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDTztBQUNQLGFBQWEsNEJBQTRCLElBQUksb0JBQW9CLElBQUksZ0JBQWdCLElBQUksc0JBQXNCLElBQUksV0FBVztBQUM5SCxRQUFRLG9TQUErQjtBQUN2QyxRQUFRLHdMQUE2QjtBQUNyQyxRQUFRLG9MQUEyQjtBQUNuQyxRQUFRLDZQQUFxQjtBQUM3QixRQUFRLGtMQUEwQjtBQUNsQztBQUNBLFlBQVksdUVBQXVFO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNkJBQTZCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsMkJBQTJCLHdCQUF3QixFQUFFLDRCQUE0QixJQUFJLHlEQUF5RDtBQUM5STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ087QUFDUCxhQUFhLHFDQUFxQyxJQUFJLG9CQUFvQixJQUFJLGdCQUFnQixJQUFJLHNCQUFzQixJQUFJLFdBQVc7QUFDdkksUUFBUSxvU0FBK0I7QUFDdkMsUUFBUSx3TEFBNkI7QUFDckMsUUFBUSxvTEFBMkI7QUFDbkMsUUFBUSw2UEFBcUI7QUFDN0IsUUFBUSxrTEFBMEI7QUFDbEM7QUFDQSxZQUFZLCtFQUErRTtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsNkJBQTZCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSwyQkFBMkIsd0JBQXdCLEVBQUUsNEJBQTRCLElBQUkseURBQXlEO0FBQzlJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFVBQVUsSUFBSSxhQUFhO0FBQ3hDLFFBQVEsa01BQWtDO0FBQzFDLFFBQVEsK1hBQTBFO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLGVBQWUsNkRBQVU7QUFDekI7QUFDQTtBQUNBLG9CQUFvQixnREFBZ0Q7QUFDcEU7QUFDQSwyREFBMkQsNkRBQVU7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrRUFBVztBQUNyQztBQUNBLDJCQUEyQixnRUFBYztBQUN6QztBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEI7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFNBQVM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vaW5zaWdodC9nZXQtbmZ0cy5qcz9jYTVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENhY2hlZENoYWluIH0gZnJvbSBcIi4uL2NoYWlucy91dGlscy5qc1wiO1xuaW1wb3J0IHsgZ2V0Q29udHJhY3QgfSBmcm9tIFwiLi4vY29udHJhY3QvY29udHJhY3QuanNcIjtcbmltcG9ydCB7IGdldEFkZHJlc3MgfSBmcm9tIFwiLi4vdXRpbHMvYWRkcmVzcy5qc1wiO1xuLyoqXG4gKiBHZXQgTkZUcyBvd25lZCBieSBhbiBhZGRyZXNzXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IEluc2lnaHQgfSBmcm9tIFwidGhpcmR3ZWJcIjtcbiAqXG4gKiBjb25zdCBuZnRzID0gYXdhaXQgSW5zaWdodC5nZXRPd25lZE5GVHMoe1xuICogICBjbGllbnQsXG4gKiAgIGNoYWluczogW3NlcG9saWFdLFxuICogICBvd25lckFkZHJlc3M6IFwiMHgxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwXCIsXG4gKiB9KTtcbiAqIGBgYFxuICogQGluc2lnaHRcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldE93bmVkTkZUcyhhcmdzKSB7XG4gICAgY29uc3QgW3sgZ2V0VjFOZnRzIH0sIHsgZ2V0VGhpcmR3ZWJEb21haW5zIH0sIHsgZ2V0Q2xpZW50RmV0Y2ggfSwgeyBhc3NlcnRJbnNpZ2h0RW5hYmxlZCB9LCB7IHN0cmluZ2lmeSB9LF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIGltcG9ydChcIkB0aGlyZHdlYi1kZXYvaW5zaWdodFwiKSxcbiAgICAgICAgaW1wb3J0KFwiLi4vdXRpbHMvZG9tYWlucy5qc1wiKSxcbiAgICAgICAgaW1wb3J0KFwiLi4vdXRpbHMvZmV0Y2guanNcIiksXG4gICAgICAgIGltcG9ydChcIi4vY29tbW9uLmpzXCIpLFxuICAgICAgICBpbXBvcnQoXCJ2aWVtXCIpLFxuICAgIF0pO1xuICAgIGNvbnN0IHsgY2xpZW50LCBjaGFpbnMsIG93bmVyQWRkcmVzcywgY29udHJhY3RBZGRyZXNzZXMsIHF1ZXJ5T3B0aW9ucyB9ID0gYXJncztcbiAgICBhd2FpdCBhc3NlcnRJbnNpZ2h0RW5hYmxlZChjaGFpbnMpO1xuICAgIGNvbnN0IGRlZmF1bHRRdWVyeU9wdGlvbnMgPSB7XG4gICAgICAgIGNoYWluOiBjaGFpbnMubWFwKChjaGFpbikgPT4gY2hhaW4uaWQpLFxuICAgICAgICAvLyBtZXRhZGF0YTogaW5jbHVkZU1ldGFkYXRhID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIsIFRPRE8gKGluc2lnaHQpOiBhZGQgc3VwcG9ydCBmb3IgdGhpc1xuICAgICAgICBsaW1pdDogNTAsXG4gICAgICAgIG93bmVyX2FkZHJlc3M6IFtvd25lckFkZHJlc3NdLFxuICAgICAgICBjb250cmFjdF9hZGRyZXNzOiBjb250cmFjdEFkZHJlc3NlcyA/IGNvbnRyYWN0QWRkcmVzc2VzIDogdW5kZWZpbmVkLFxuICAgIH07XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0VjFOZnRzKHtcbiAgICAgICAgYmFzZVVybDogYGh0dHBzOi8vJHtnZXRUaGlyZHdlYkRvbWFpbnMoKS5pbnNpZ2h0fWAsXG4gICAgICAgIGZldGNoOiBnZXRDbGllbnRGZXRjaChjbGllbnQpLFxuICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgLi4uZGVmYXVsdFF1ZXJ5T3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnF1ZXJ5T3B0aW9ucyxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtyZXN1bHQucmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3VsdC5yZXNwb25zZS5zdGF0dXNUZXh0fSAtICR7cmVzdWx0LmVycm9yID8gc3RyaW5naWZ5KHJlc3VsdC5lcnJvcikgOiBcIlVua25vd24gZXJyb3JcIn1gKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNmb3JtZWROZnRzID0gYXdhaXQgdHJhbnNmb3JtTkZUTW9kZWwocmVzdWx0LmRhdGE/LmRhdGEgPz8gW10sIGNsaWVudCwgb3duZXJBZGRyZXNzKTtcbiAgICByZXR1cm4gdHJhbnNmb3JtZWROZnRzLm1hcCgobmZ0KSA9PiAoe1xuICAgICAgICAuLi5uZnQsXG4gICAgICAgIHF1YW50aXR5T3duZWQ6IG5mdC5xdWFudGl0eU93bmVkID8/IDFuLFxuICAgIH0pKTtcbn1cbi8qKlxuICogR2V0IGFsbCBORlRzIGZyb20gYSBjb250cmFjdFxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBJbnNpZ2h0IH0gZnJvbSBcInRoaXJkd2ViXCI7XG4gKlxuICogY29uc3QgbmZ0cyA9IGF3YWl0IEluc2lnaHQuZ2V0Q29udHJhY3RORlRzKHtcbiAqICAgY2xpZW50LFxuICogICBjaGFpbnM6IFtzZXBvbGlhXSxcbiAqICAgY29udHJhY3RBZGRyZXNzOiBcIjB4MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDU2Nzg5MFwiLFxuICogfSk7XG4gKiBgYGBcbiAqIEBpbnNpZ2h0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDb250cmFjdE5GVHMoYXJncykge1xuICAgIGNvbnN0IFt7IGdldFYxTmZ0c0J5Q29udHJhY3RBZGRyZXNzIH0sIHsgZ2V0VGhpcmR3ZWJEb21haW5zIH0sIHsgZ2V0Q2xpZW50RmV0Y2ggfSwgeyBhc3NlcnRJbnNpZ2h0RW5hYmxlZCB9LCB7IHN0cmluZ2lmeSB9LF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIGltcG9ydChcIkB0aGlyZHdlYi1kZXYvaW5zaWdodFwiKSxcbiAgICAgICAgaW1wb3J0KFwiLi4vdXRpbHMvZG9tYWlucy5qc1wiKSxcbiAgICAgICAgaW1wb3J0KFwiLi4vdXRpbHMvZmV0Y2guanNcIiksXG4gICAgICAgIGltcG9ydChcIi4vY29tbW9uLmpzXCIpLFxuICAgICAgICBpbXBvcnQoXCIuLi91dGlscy9qc29uLmpzXCIpLFxuICAgIF0pO1xuICAgIGNvbnN0IHsgY2xpZW50LCBjaGFpbnMsIGNvbnRyYWN0QWRkcmVzcywgaW5jbHVkZU93bmVycyA9IHRydWUsIHF1ZXJ5T3B0aW9ucywgfSA9IGFyZ3M7XG4gICAgY29uc3QgZGVmYXVsdFF1ZXJ5T3B0aW9ucyA9IHtcbiAgICAgICAgY2hhaW46IGNoYWlucy5tYXAoKGNoYWluKSA9PiBjaGFpbi5pZCksXG4gICAgICAgIGluY2x1ZGVfb3duZXJzOiBpbmNsdWRlT3duZXJzID09PSB0cnVlID8gXCJ0cnVlXCIgOiBcImZhbHNlXCIsXG4gICAgICAgIC8vIG1ldGFkYXRhOiBpbmNsdWRlTWV0YWRhdGEgPyBcInRydWVcIiA6IFwiZmFsc2VcIiwgVE9ETyAoaW5zaWdodCk6IGFkZCBzdXBwb3J0IGZvciB0aGlzXG4gICAgICAgIGxpbWl0OiA1MCxcbiAgICB9O1xuICAgIGF3YWl0IGFzc2VydEluc2lnaHRFbmFibGVkKGNoYWlucyk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ2V0VjFOZnRzQnlDb250cmFjdEFkZHJlc3Moe1xuICAgICAgICBiYXNlVXJsOiBgaHR0cHM6Ly8ke2dldFRoaXJkd2ViRG9tYWlucygpLmluc2lnaHR9YCxcbiAgICAgICAgZmV0Y2g6IGdldENsaWVudEZldGNoKGNsaWVudCksXG4gICAgICAgIHBhdGg6IHtcbiAgICAgICAgICAgIGNvbnRyYWN0X2FkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgfSxcbiAgICAgICAgcXVlcnk6IHtcbiAgICAgICAgICAgIC4uLmRlZmF1bHRRdWVyeU9wdGlvbnMsXG4gICAgICAgICAgICAuLi5xdWVyeU9wdGlvbnMsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cmVzdWx0LnJlc3BvbnNlLnN0YXR1c30gJHtyZXN1bHQucmVzcG9uc2Uuc3RhdHVzVGV4dH0gLSAke3Jlc3VsdC5lcnJvciA/IHN0cmluZ2lmeShyZXN1bHQuZXJyb3IpIDogXCJVbmtub3duIGVycm9yXCJ9YCk7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2Zvcm1ORlRNb2RlbChyZXN1bHQuZGF0YT8uZGF0YSA/PyBbXSwgY2xpZW50KTtcbn1cbi8qKlxuICogR2V0IE5GVCBtZXRhZGF0YSBieSBjb250cmFjdCBhZGRyZXNzIGFuZCB0b2tlbiBpZFxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBJbnNpZ2h0IH0gZnJvbSBcInRoaXJkd2ViXCI7XG4gKlxuICogY29uc3QgbmZ0ID0gYXdhaXQgSW5zaWdodC5nZXRORlQoe1xuICogICBjbGllbnQsXG4gKiAgIGNoYWluOiBzZXBvbGlhLFxuICogICBjb250cmFjdEFkZHJlc3M6IFwiMHgxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwXCIsXG4gKiAgIHRva2VuSWQ6IDFuLFxuICogfSk7XG4gKiBgYGBcbiAqIEBpbnNpZ2h0XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRORlQoYXJncykge1xuICAgIGNvbnN0IFt7IGdldFYxTmZ0c0J5Q29udHJhY3RBZGRyZXNzQnlUb2tlbklkIH0sIHsgZ2V0VGhpcmR3ZWJEb21haW5zIH0sIHsgZ2V0Q2xpZW50RmV0Y2ggfSwgeyBhc3NlcnRJbnNpZ2h0RW5hYmxlZCB9LCB7IHN0cmluZ2lmeSB9LF0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIGltcG9ydChcIkB0aGlyZHdlYi1kZXYvaW5zaWdodFwiKSxcbiAgICAgICAgaW1wb3J0KFwiLi4vdXRpbHMvZG9tYWlucy5qc1wiKSxcbiAgICAgICAgaW1wb3J0KFwiLi4vdXRpbHMvZmV0Y2guanNcIiksXG4gICAgICAgIGltcG9ydChcIi4vY29tbW9uLmpzXCIpLFxuICAgICAgICBpbXBvcnQoXCIuLi91dGlscy9qc29uLmpzXCIpLFxuICAgIF0pO1xuICAgIGNvbnN0IHsgY2xpZW50LCBjaGFpbiwgY29udHJhY3RBZGRyZXNzLCB0b2tlbklkLCBpbmNsdWRlT3duZXJzID0gdHJ1ZSwgcXVlcnlPcHRpb25zLCB9ID0gYXJncztcbiAgICBhd2FpdCBhc3NlcnRJbnNpZ2h0RW5hYmxlZChbY2hhaW5dKTtcbiAgICBjb25zdCBkZWZhdWx0UXVlcnlPcHRpb25zID0ge1xuICAgICAgICBjaGFpbl9pZDogW2NoYWluLmlkXSxcbiAgICAgICAgaW5jbHVkZV9vd25lcnM6IGluY2x1ZGVPd25lcnMgPT09IHRydWUgPyBcInRydWVcIiA6IFwiZmFsc2VcIixcbiAgICB9O1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldFYxTmZ0c0J5Q29udHJhY3RBZGRyZXNzQnlUb2tlbklkKHtcbiAgICAgICAgYmFzZVVybDogYGh0dHBzOi8vJHtnZXRUaGlyZHdlYkRvbWFpbnMoKS5pbnNpZ2h0fWAsXG4gICAgICAgIGZldGNoOiBnZXRDbGllbnRGZXRjaChjbGllbnQpLFxuICAgICAgICBwYXRoOiB7XG4gICAgICAgICAgICBjb250cmFjdF9hZGRyZXNzOiBjb250cmFjdEFkZHJlc3MsXG4gICAgICAgICAgICB0b2tlbl9pZDogdG9rZW5JZC50b1N0cmluZygpLFxuICAgICAgICB9LFxuICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgLi4uZGVmYXVsdFF1ZXJ5T3B0aW9ucyxcbiAgICAgICAgICAgIC4uLnF1ZXJ5T3B0aW9ucyxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtyZXN1bHQucmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3VsdC5yZXNwb25zZS5zdGF0dXNUZXh0fSAtICR7cmVzdWx0LmVycm9yID8gc3RyaW5naWZ5KHJlc3VsdC5lcnJvcikgOiBcIlVua25vd24gZXJyb3JcIn1gKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNmb3JtZWROZnRzID0gYXdhaXQgdHJhbnNmb3JtTkZUTW9kZWwocmVzdWx0LmRhdGE/LmRhdGEgPz8gW10sIGNsaWVudCk7XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkTmZ0cz8uWzBdO1xufVxuYXN5bmMgZnVuY3Rpb24gdHJhbnNmb3JtTkZUTW9kZWwobmZ0cywgY2xpZW50LCBvd25lckFkZHJlc3MpIHtcbiAgICBjb25zdCBbeyBwYXJzZU5GVCB9LCB7IHRvdGFsU3VwcGx5IH1dID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBpbXBvcnQoXCIuLi91dGlscy9uZnQvcGFyc2VOZnQuanNcIiksXG4gICAgICAgIGltcG9ydChcIi4uL2V4dGVuc2lvbnMvZXJjMTE1NS9fX2dlbmVyYXRlZF9fL0lFUkMxMTU1L3JlYWQvdG90YWxTdXBwbHkuanNcIiksXG4gICAgXSk7XG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKG5mdHMubWFwKGFzeW5jIChuZnQpID0+IHtcbiAgICAgICAgbGV0IHBhcnNlZE5mdDtcbiAgICAgICAgY29uc3QgeyBjb250cmFjdCwgXG4gICAgICAgIC8vIGJpb21lLWlnbm9yZSBsaW50L2NvcnJlY3RuZXNzL25vVW51c2VkVmFyaWFibGVzOiBleHBsaWNpdGx5IHVudXNlZCB0byBub3QgaW5jbHVkZSBpdCBpbiB0aGUgcmVzdWx0aW5nIG1ldGFkYXRhXG4gICAgICAgIGV4dHJhX21ldGFkYXRhLCBcbiAgICAgICAgLy8gYmlvbWUtaWdub3JlIGxpbnQvY29ycmVjdG5lc3Mvbm9VbnVzZWRWYXJpYWJsZXM6IGV4cGxpY2l0bHkgdW51c2VkIHRvIG5vdCBpbmNsdWRlIGl0IGluIHRoZSByZXN1bHRpbmcgbWV0YWRhdGFcbiAgICAgICAgY29sbGVjdGlvbiwgbWV0YWRhdGFfdXJsLCBcbiAgICAgICAgLy8gYmlvbWUtaWdub3JlIGxpbnQvY29ycmVjdG5lc3Mvbm9VbnVzZWRWYXJpYWJsZXM6IGV4cGxpY2l0bHkgdW51c2VkIHRvIG5vdCBpbmNsdWRlIGl0IGluIHRoZSByZXN1bHRpbmcgbWV0YWRhdGFcbiAgICAgICAgY2hhaW5faWQsIHRva2VuX2lkLCBcbiAgICAgICAgLy8gYmlvbWUtaWdub3JlIGxpbnQvY29ycmVjdG5lc3Mvbm9VbnVzZWRWYXJpYWJsZXM6IGV4cGxpY2l0bHkgdW51c2VkIHRvIG5vdCBpbmNsdWRlIGl0IGluIHRoZSByZXN1bHRpbmcgbWV0YWRhdGFcbiAgICAgICAgc3RhdHVzLCBiYWxhbmNlLCBcbiAgICAgICAgLy8gYmlvbWUtaWdub3JlIGxpbnQvY29ycmVjdG5lc3Mvbm9VbnVzZWRWYXJpYWJsZXM6IGV4cGxpY2l0bHkgdW51c2VkIHRvIG5vdCBpbmNsdWRlIGl0IGluIHRoZSByZXN1bHRpbmcgbWV0YWRhdGFcbiAgICAgICAgdG9rZW5fdHlwZSwgLi4ucmVzdCB9ID0gbmZ0O1xuICAgICAgICBsZXQgbWV0YWRhdGFUb1VzZSA9IHJlc3Q7XG4gICAgICAgIGxldCBvd25lcnMgPSBvd25lckFkZHJlc3NcbiAgICAgICAgICAgID8gW2dldEFkZHJlc3Mob3duZXJBZGRyZXNzKV1cbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoXCJvd25lcl9hZGRyZXNzZXNcIiBpbiByZXN0KSB7XG4gICAgICAgICAgICBjb25zdCB7IG93bmVyX2FkZHJlc3NlcywgLi4ucmVzdFdpdGhvdXRPd25lckFkZHJlc3NlcyB9ID0gcmVzdDtcbiAgICAgICAgICAgIG1ldGFkYXRhVG9Vc2UgPSByZXN0V2l0aG91dE93bmVyQWRkcmVzc2VzO1xuICAgICAgICAgICAgb3duZXJzID0gb3duZXJzID8/IG93bmVyX2FkZHJlc3Nlcz8ubWFwKChvKSA9PiBnZXRBZGRyZXNzKG8pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhZGF0YSA9IHJlcGxhY2VJUEZTR2F0ZXdheVJlY3Vyc2l2ZWx5KHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IG5mdC5leHRyYV9tZXRhZGF0YT8uYXR0cmlidXRlcyA/PyB1bmRlZmluZWQsXG4gICAgICAgICAgICBpbWFnZTogbmZ0LmltYWdlX3VybCxcbiAgICAgICAgICAgIHVyaTogbmZ0Lm1ldGFkYXRhX3VybCA/PyBcIlwiLFxuICAgICAgICAgICAgLi4ubWV0YWRhdGFUb1VzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb250cmFjdD8udHlwZSA9PT0gXCJlcmMxMTU1XCIpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gKGluc2lnaHQpOiB0aGlzIG5lZWRzIHRvIGJlIGFkZGVkIGluIHRoZSBBUElcbiAgICAgICAgICAgIGNvbnN0IHN1cHBseSA9IGF3YWl0IHRvdGFsU3VwcGx5KHtcbiAgICAgICAgICAgICAgICBjb250cmFjdDogZ2V0Q29udHJhY3Qoe1xuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBjb250cmFjdC5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBjaGFpbjogZ2V0Q2FjaGVkQ2hhaW4oY29udHJhY3QuY2hhaW5faWQpLFxuICAgICAgICAgICAgICAgICAgICBjbGllbnQ6IGNsaWVudCxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBpZDogQmlnSW50KHRva2VuX2lkKSxcbiAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IDBuKTtcbiAgICAgICAgICAgIHBhcnNlZE5mdCA9IHBhcnNlTkZUKG1ldGFkYXRhLCB7XG4gICAgICAgICAgICAgICAgY2hhaW5JZDogY29udHJhY3Q/LmNoYWluX2lkID8/IDAsXG4gICAgICAgICAgICAgICAgb3duZXI6IG93bmVycz8uWzBdLFxuICAgICAgICAgICAgICAgIHN1cHBseTogc3VwcGx5LFxuICAgICAgICAgICAgICAgIHRva2VuQWRkcmVzczogY29udHJhY3Q/LmFkZHJlc3MgPz8gXCJcIixcbiAgICAgICAgICAgICAgICB0b2tlbklkOiBCaWdJbnQodG9rZW5faWQpLFxuICAgICAgICAgICAgICAgIHRva2VuVXJpOiByZXBsYWNlSVBGU0dhdGV3YXkobWV0YWRhdGFfdXJsKSA/PyBcIlwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiRVJDMTE1NVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJzZWROZnQgPSBwYXJzZU5GVChtZXRhZGF0YSwge1xuICAgICAgICAgICAgICAgIGNoYWluSWQ6IGNvbnRyYWN0Py5jaGFpbl9pZCA/PyAwLFxuICAgICAgICAgICAgICAgIG93bmVyOiBvd25lcnM/LlswXSxcbiAgICAgICAgICAgICAgICB0b2tlbkFkZHJlc3M6IGNvbnRyYWN0Py5hZGRyZXNzID8/IFwiXCIsXG4gICAgICAgICAgICAgICAgdG9rZW5JZDogQmlnSW50KHRva2VuX2lkKSxcbiAgICAgICAgICAgICAgICB0b2tlblVyaTogcmVwbGFjZUlQRlNHYXRld2F5KG1ldGFkYXRhX3VybCkgPz8gXCJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcIkVSQzcyMVwiLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnBhcnNlZE5mdCxcbiAgICAgICAgICAgIC4uLihjb250cmFjdD8udHlwZSA9PT0gXCJlcmMxMTU1XCJcbiAgICAgICAgICAgICAgICA/IHsgcXVhbnRpdHlPd25lZDogYmFsYW5jZSA/IEJpZ0ludChiYWxhbmNlKSA6IHVuZGVmaW5lZCB9XG4gICAgICAgICAgICAgICAgOiB7fSksXG4gICAgICAgIH07XG4gICAgfSkpO1xufVxuLy8gYmlvbWUtaWdub3JlIGxpbnQvc3VzcGljaW91cy9ub0V4cGxpY2l0QW55OiB0aGlzIHNob3VsZCBiZSBmaXhlZCBpbiB0aGUgQVBJXG5mdW5jdGlvbiByZXBsYWNlSVBGU0dhdGV3YXlSZWN1cnNpdmVseShvYmopIHtcbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiB8fCBvYmogPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gcmVwbGFjZUlQRlNHYXRld2F5KG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlcGxhY2VJUEZTR2F0ZXdheVJlY3Vyc2l2ZWx5KG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gcmVwbGFjZUlQRlNHYXRld2F5KHVybCkge1xuICAgIGlmICghdXJsIHx8IHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICAgICAgICBpZiAocGFyc2VkVXJsLmhvc3QuZW5kc1dpdGgoXCIuaXBmc2Nkbi5pb1wiKSkge1xuICAgICAgICAgICAgY29uc3QgcGF0aHMgPSBwYXJzZWRVcmwucGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBwYXRocy5maW5kSW5kZXgoKHBhdGgpID0+IHBhdGggPT09IFwiaXBmc1wiKTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXBmc0hhc2ggPSBwYXRocy5zbGljZShpbmRleCArIDEpLmpvaW4oXCIvXCIpO1xuICAgICAgICAgICAgaWYgKGlwZnNIYXNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBpcGZzOi8vJHtpcGZzSGFzaH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCB7XG4gICAgICAgIC8vIElmIHRoZSBVUkwgaXMgaW52YWxpZCwgcmV0dXJuIGl0IGFzIGlzXG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICAgIHJldHVybiB1cmw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXQtbmZ0cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/insight/get-nfts.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/base64/base64.js":
/*!***************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/base64/base64.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isBase64JSON: function() { return /* binding */ isBase64JSON; },\n/* harmony export */   parseBase64String: function() { return /* binding */ parseBase64String; }\n/* harmony export */ });\n/* harmony import */ var _uint8_array_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../uint8-array.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/uint8-array.js\");\n\n/**\n * Checks if a given string is a base64 encoded JSON string.\n * @param input - The string to be checked.\n * @returns True if the input string starts with \"data:application/json;base64\", false otherwise.\n * @example\n * ```ts\n * isBase64JSON(\"data:application/json;base64,eyJ0ZXN0IjoiYmFzZTY0In0=\")\n * // true\n * ```\n */\nfunction isBase64JSON(input) {\n    if (input.startsWith(\"data:application/json;base64\")) {\n        return true;\n    }\n    return false;\n}\n/**\n * Parses a base64 string and returns the decoded string.\n * @param input - The base64 string to parse.\n * @returns The decoded string.\n * @example\n * ```ts\n * parseBase64String(\"data:application/json;base64,eyJ0ZXN0IjoiYmFzZTY0In0=\")\n * // '{\"test\":\"base64\"}'\n * ```\n */\nfunction parseBase64String(input) {\n    const [, base64] = input.split(\",\");\n    return (0,_uint8_array_js__WEBPACK_IMPORTED_MODULE_0__.base64ToString)(base64);\n}\n//# sourceMappingURL=base64.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy9iYXNlNjQvYmFzZTY0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDTztBQUNQLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QyxRQUFRLGdCQUFnQjtBQUN4QjtBQUNBO0FBQ087QUFDUDtBQUNBLFdBQVcsK0RBQWM7QUFDekI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vdXRpbHMvYmFzZTY0L2Jhc2U2NC5qcz8yNzJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJhc2U2NFRvU3RyaW5nIH0gZnJvbSBcIi4uL3VpbnQ4LWFycmF5LmpzXCI7XG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIHN0cmluZyBpcyBhIGJhc2U2NCBlbmNvZGVkIEpTT04gc3RyaW5nLlxuICogQHBhcmFtIGlucHV0IC0gVGhlIHN0cmluZyB0byBiZSBjaGVja2VkLlxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgaW5wdXQgc3RyaW5nIHN0YXJ0cyB3aXRoIFwiZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NFwiLCBmYWxzZSBvdGhlcndpc2UuXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGlzQmFzZTY0SlNPTihcImRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMFpYTjBJam9pWW1GelpUWTBJbjA9XCIpXG4gKiAvLyB0cnVlXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQmFzZTY0SlNPTihpbnB1dCkge1xuICAgIGlmIChpbnB1dC5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NFwiKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBQYXJzZXMgYSBiYXNlNjQgc3RyaW5nIGFuZCByZXR1cm5zIHRoZSBkZWNvZGVkIHN0cmluZy5cbiAqIEBwYXJhbSBpbnB1dCAtIFRoZSBiYXNlNjQgc3RyaW5nIHRvIHBhcnNlLlxuICogQHJldHVybnMgVGhlIGRlY29kZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBwYXJzZUJhc2U2NFN0cmluZyhcImRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMFpYTjBJam9pWW1GelpUWTBJbjA9XCIpXG4gKiAvLyAne1widGVzdFwiOlwiYmFzZTY0XCJ9J1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUJhc2U2NFN0cmluZyhpbnB1dCkge1xuICAgIGNvbnN0IFssIGJhc2U2NF0gPSBpbnB1dC5zcGxpdChcIixcIik7XG4gICAgcmV0dXJuIGJhc2U2NFRvU3RyaW5nKGJhc2U2NCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/base64/base64.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/nft/fetchTokenMetadata.js":
/*!************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/nft/fetchTokenMetadata.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchTokenMetadata: function() { return /* binding */ fetchTokenMetadata; }\n/* harmony export */ });\n/* harmony import */ var _base64_base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../base64/base64.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/base64/base64.js\");\n/* harmony import */ var _encoding_hex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../encoding/hex.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/hex.js\");\n\n\n/**\n * Fetches the metadata for a token.\n *\n * @param options - The options for fetching the token metadata.\n * @returns The token metadata.\n * @internal\n */\nasync function fetchTokenMetadata(options) {\n    const { client, tokenId, tokenUri } = options;\n    // handle case where the URI is a base64 encoded JSON (onchain nft)\n    if ((0,_base64_base64_js__WEBPACK_IMPORTED_MODULE_0__.isBase64JSON)(tokenUri)) {\n        try {\n            return JSON.parse((0,_base64_base64_js__WEBPACK_IMPORTED_MODULE_0__.parseBase64String)(tokenUri));\n        }\n        catch (e) {\n            console.error(\"Failed to fetch base64 encoded NFT\", { tokenId, tokenUri }, e);\n            throw e;\n        }\n    }\n    // in all other cases we will need the `download` function from storage\n    const { download } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../storage/download.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/storage/download.js\"));\n    // handle non-dynamic uris (most common case -> skip the other checks)\n    try {\n        if (!tokenUri.includes(\"{id}\")) {\n            return await (await download({ client, uri: tokenUri })).json();\n        }\n    }\n    catch (e) {\n        console.error(\"Failed to fetch non-dynamic NFT\", { tokenId, tokenUri }, e);\n        throw e;\n    }\n    // DYNAMIC NFT FORMATS (2 options, sadly has to be waterfall)\n    try {\n        try {\n            // try first dynamic id format\n            return await (await download({\n                client,\n                uri: tokenUri.replace(\"{id}\", (0,_encoding_hex_js__WEBPACK_IMPORTED_MODULE_1__.numberToHex)(tokenId, { size: 32 }).slice(2)),\n            })).json();\n        }\n        catch {\n            // otherwise attempt the second format\n            return await (await download({\n                client,\n                uri: tokenUri.replace(\"{id}\", tokenId.toString()),\n            })).json();\n        }\n    }\n    catch (e) {\n        console.error(\"Failed to fetch dynamic NFT\", { tokenId, tokenUri }, e);\n        throw e;\n    }\n}\n//# sourceMappingURL=fetchTokenMetadata.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy9uZnQvZmV0Y2hUb2tlbk1ldGFkYXRhLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFzRTtBQUNyQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSw0QkFBNEI7QUFDeEM7QUFDQSxRQUFRLCtEQUFZO0FBQ3BCO0FBQ0EsOEJBQThCLG9FQUFpQjtBQUMvQztBQUNBO0FBQ0Esa0VBQWtFLG1CQUFtQjtBQUNyRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVyxRQUFRLGlNQUFtQztBQUNsRTtBQUNBO0FBQ0EsaUNBQWlDLEdBQUc7QUFDcEMsMkNBQTJDLHVCQUF1QjtBQUNsRTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsbUJBQW1CO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsR0FBRyxHQUFHLDZEQUFXLFlBQVksVUFBVTtBQUMvRSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxHQUFHO0FBQzNDLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsbUJBQW1CO0FBQzFFO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy9uZnQvZmV0Y2hUb2tlbk1ldGFkYXRhLmpzP2E2NDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNCYXNlNjRKU09OLCBwYXJzZUJhc2U2NFN0cmluZyB9IGZyb20gXCIuLi9iYXNlNjQvYmFzZTY0LmpzXCI7XG5pbXBvcnQgeyBudW1iZXJUb0hleCB9IGZyb20gXCIuLi9lbmNvZGluZy9oZXguanNcIjtcbi8qKlxuICogRmV0Y2hlcyB0aGUgbWV0YWRhdGEgZm9yIGEgdG9rZW4uXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgZmV0Y2hpbmcgdGhlIHRva2VuIG1ldGFkYXRhLlxuICogQHJldHVybnMgVGhlIHRva2VuIG1ldGFkYXRhLlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFRva2VuTWV0YWRhdGEob3B0aW9ucykge1xuICAgIGNvbnN0IHsgY2xpZW50LCB0b2tlbklkLCB0b2tlblVyaSB9ID0gb3B0aW9ucztcbiAgICAvLyBoYW5kbGUgY2FzZSB3aGVyZSB0aGUgVVJJIGlzIGEgYmFzZTY0IGVuY29kZWQgSlNPTiAob25jaGFpbiBuZnQpXG4gICAgaWYgKGlzQmFzZTY0SlNPTih0b2tlblVyaSkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHBhcnNlQmFzZTY0U3RyaW5nKHRva2VuVXJpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggYmFzZTY0IGVuY29kZWQgTkZUXCIsIHsgdG9rZW5JZCwgdG9rZW5VcmkgfSwgZSk7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGluIGFsbCBvdGhlciBjYXNlcyB3ZSB3aWxsIG5lZWQgdGhlIGBkb3dubG9hZGAgZnVuY3Rpb24gZnJvbSBzdG9yYWdlXG4gICAgY29uc3QgeyBkb3dubG9hZCB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vLi4vc3RvcmFnZS9kb3dubG9hZC5qc1wiKTtcbiAgICAvLyBoYW5kbGUgbm9uLWR5bmFtaWMgdXJpcyAobW9zdCBjb21tb24gY2FzZSAtPiBza2lwIHRoZSBvdGhlciBjaGVja3MpXG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKCF0b2tlblVyaS5pbmNsdWRlcyhcIntpZH1cIikpIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCAoYXdhaXQgZG93bmxvYWQoeyBjbGllbnQsIHVyaTogdG9rZW5VcmkgfSkpLmpzb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIG5vbi1keW5hbWljIE5GVFwiLCB7IHRva2VuSWQsIHRva2VuVXJpIH0sIGUpO1xuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbiAgICAvLyBEWU5BTUlDIE5GVCBGT1JNQVRTICgyIG9wdGlvbnMsIHNhZGx5IGhhcyB0byBiZSB3YXRlcmZhbGwpXG4gICAgdHJ5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIHRyeSBmaXJzdCBkeW5hbWljIGlkIGZvcm1hdFxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IChhd2FpdCBkb3dubG9hZCh7XG4gICAgICAgICAgICAgICAgY2xpZW50LFxuICAgICAgICAgICAgICAgIHVyaTogdG9rZW5VcmkucmVwbGFjZShcIntpZH1cIiwgbnVtYmVyVG9IZXgodG9rZW5JZCwgeyBzaXplOiAzMiB9KS5zbGljZSgyKSksXG4gICAgICAgICAgICB9KSkuanNvbigpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBhdHRlbXB0IHRoZSBzZWNvbmQgZm9ybWF0XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgKGF3YWl0IGRvd25sb2FkKHtcbiAgICAgICAgICAgICAgICBjbGllbnQsXG4gICAgICAgICAgICAgICAgdXJpOiB0b2tlblVyaS5yZXBsYWNlKFwie2lkfVwiLCB0b2tlbklkLnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgfSkpLmpzb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGZldGNoIGR5bmFtaWMgTkZUXCIsIHsgdG9rZW5JZCwgdG9rZW5VcmkgfSwgZSk7XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmV0Y2hUb2tlbk1ldGFkYXRhLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/nft/fetchTokenMetadata.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/nft/parseNft.js":
/*!**************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/nft/parseNft.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNFT: function() { return /* binding */ parseNFT; },\n/* harmony export */   parseNftUri: function() { return /* binding */ parseNftUri; }\n/* harmony export */ });\n/* harmony import */ var _chains_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../chains/utils.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/chains/utils.js\");\n/* harmony import */ var _contract_contract_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../contract/contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/contract/contract.js\");\n/* harmony import */ var _address_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../address.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/address.js\");\n\n\n\n/**\n * Parses the NFT metadata and options to create an NFT object.\n * @param base - The base NFT metadata.\n * @param options - The options for parsing the NFT.\n * @returns The parsed NFT object.\n * @internal\n */\nfunction parseNFT(base, options) {\n    switch (options.type) {\n        case \"ERC721\":\n            return {\n                chainId: options.chainId,\n                id: options.tokenId,\n                metadata: base,\n                owner: options?.owner ?? null,\n                tokenAddress: options.tokenAddress,\n                tokenURI: options.tokenUri,\n                type: options.type,\n            };\n        case \"ERC1155\":\n            return {\n                chainId: options.chainId,\n                id: options.tokenId,\n                metadata: base,\n                owner: options?.owner ?? null,\n                supply: options.supply,\n                tokenAddress: options.tokenAddress,\n                tokenURI: options.tokenUri,\n                type: options.type,\n            };\n        default:\n            throw new Error(\"Invalid NFT type\");\n    }\n}\n/**\n * Parses an NFT URI.\n * @param options - The options for parsing an NFT URI.\n * @param options.client - The Thirdweb client.\n * @param options.uri - The NFT URI to parse.\n * @returns A promise that resolves to the NFT URI, or null if the URI could not be parsed.\n *\n * @example\n * ```ts\n * import { parseNftUri } from \"thirdweb/utils/ens\";\n * const nftUri = await parseNftUri({\n *    client,\n *    uri: \"eip155:1/erc1155:0xb32979486938aa9694bfc898f35dbed459f44424/10063\",\n * });\n *\n * console.log(nftUri); // ipfs://bafybeiemxf5abjwjbikoz4mc3a3dla6ual3jsgpdr4cjr3oz3evfyavhwq/\n * ```\n *\n * @extension ENS\n *\n */\nasync function parseNftUri(options) {\n    let uri = options.uri;\n    // parse valid nft spec (CAIP-22/CAIP-29)\n    // @see: https://github.com/ChainAgnostic/CAIPs/tree/master/CAIPs\n    if (uri.startsWith(\"did:nft:\")) {\n        // convert DID to CAIP\n        uri = uri.replace(\"did:nft:\", \"\").replace(/_/g, \"/\");\n    }\n    const [reference = \"\", asset_namespace = \"\", tokenID = \"\"] = uri.split(\"/\");\n    const [eip_namespace, chainID] = reference.split(\":\");\n    const [erc_namespace, contractAddress] = asset_namespace.split(\":\");\n    if (!eip_namespace || eip_namespace.toLowerCase() !== \"eip155\") {\n        throw new Error(`Invalid EIP namespace, expected EIP155, got: \"${eip_namespace}\"`);\n    }\n    if (!chainID) {\n        throw new Error(\"Chain ID not found\");\n    }\n    if (!contractAddress || !(0,_address_js__WEBPACK_IMPORTED_MODULE_0__.isAddress)(contractAddress)) {\n        throw new Error(\"Contract address not found\");\n    }\n    if (!tokenID) {\n        throw new Error(\"Token ID not found\");\n    }\n    const chain = (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_1__.getCachedChain)(Number(chainID));\n    const contract = (0,_contract_contract_js__WEBPACK_IMPORTED_MODULE_2__.getContract)({\n        address: contractAddress,\n        chain,\n        client: options.client,\n    });\n    switch (erc_namespace) {\n        case \"erc721\": {\n            const { getNFT } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc721_read_getNFT_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../extensions/erc721/read/getNFT.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc721/read/getNFT.js\"));\n            const nft = await getNFT({\n                contract,\n                tokenId: BigInt(tokenID),\n            });\n            return nft.metadata.image ?? null;\n        }\n        case \"erc1155\": {\n            const { getNFT } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc1155_read_getNFT_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../extensions/erc1155/read/getNFT.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/read/getNFT.js\"));\n            const nft = await getNFT({\n                contract,\n                tokenId: BigInt(tokenID),\n            });\n            return nft.metadata.image ?? null;\n        }\n        default: {\n            throw new Error(`Invalid ERC namespace, expected ERC721 or ERC1155, got: \"${erc_namespace}\"`);\n        }\n    }\n}\n//# sourceMappingURL=parseNft.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy9uZnQvcGFyc2VOZnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBdUQ7QUFDRTtBQUNmO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxjQUFjO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLGNBQWM7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsc0RBQVM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixnRUFBYztBQUNoQyxxQkFBcUIsa0VBQVc7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxvQkFBb0IsU0FBUyxRQUFRLHNUQUFnRDtBQUNyRjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVMsUUFBUSx5VEFBaUQ7QUFDdEY7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHdGQUF3RixjQUFjO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy9uZnQvcGFyc2VOZnQuanM/MWJkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDYWNoZWRDaGFpbiB9IGZyb20gXCIuLi8uLi9jaGFpbnMvdXRpbHMuanNcIjtcbmltcG9ydCB7IGdldENvbnRyYWN0IH0gZnJvbSBcIi4uLy4uL2NvbnRyYWN0L2NvbnRyYWN0LmpzXCI7XG5pbXBvcnQgeyBpc0FkZHJlc3MgfSBmcm9tIFwiLi4vYWRkcmVzcy5qc1wiO1xuLyoqXG4gKiBQYXJzZXMgdGhlIE5GVCBtZXRhZGF0YSBhbmQgb3B0aW9ucyB0byBjcmVhdGUgYW4gTkZUIG9iamVjdC5cbiAqIEBwYXJhbSBiYXNlIC0gVGhlIGJhc2UgTkZUIG1ldGFkYXRhLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgcGFyc2luZyB0aGUgTkZULlxuICogQHJldHVybnMgVGhlIHBhcnNlZCBORlQgb2JqZWN0LlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU5GVChiYXNlLCBvcHRpb25zKSB7XG4gICAgc3dpdGNoIChvcHRpb25zLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcIkVSQzcyMVwiOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjaGFpbklkOiBvcHRpb25zLmNoYWluSWQsXG4gICAgICAgICAgICAgICAgaWQ6IG9wdGlvbnMudG9rZW5JZCxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogYmFzZSxcbiAgICAgICAgICAgICAgICBvd25lcjogb3B0aW9ucz8ub3duZXIgPz8gbnVsbCxcbiAgICAgICAgICAgICAgICB0b2tlbkFkZHJlc3M6IG9wdGlvbnMudG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgICAgIHRva2VuVVJJOiBvcHRpb25zLnRva2VuVXJpLFxuICAgICAgICAgICAgICAgIHR5cGU6IG9wdGlvbnMudHlwZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIGNhc2UgXCJFUkMxMTU1XCI6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGNoYWluSWQ6IG9wdGlvbnMuY2hhaW5JZCxcbiAgICAgICAgICAgICAgICBpZDogb3B0aW9ucy50b2tlbklkLFxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBiYXNlLFxuICAgICAgICAgICAgICAgIG93bmVyOiBvcHRpb25zPy5vd25lciA/PyBudWxsLFxuICAgICAgICAgICAgICAgIHN1cHBseTogb3B0aW9ucy5zdXBwbHksXG4gICAgICAgICAgICAgICAgdG9rZW5BZGRyZXNzOiBvcHRpb25zLnRva2VuQWRkcmVzcyxcbiAgICAgICAgICAgICAgICB0b2tlblVSSTogb3B0aW9ucy50b2tlblVyaSxcbiAgICAgICAgICAgICAgICB0eXBlOiBvcHRpb25zLnR5cGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBORlQgdHlwZVwiKTtcbiAgICB9XG59XG4vKipcbiAqIFBhcnNlcyBhbiBORlQgVVJJLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgcGFyc2luZyBhbiBORlQgVVJJLlxuICogQHBhcmFtIG9wdGlvbnMuY2xpZW50IC0gVGhlIFRoaXJkd2ViIGNsaWVudC5cbiAqIEBwYXJhbSBvcHRpb25zLnVyaSAtIFRoZSBORlQgVVJJIHRvIHBhcnNlLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIE5GVCBVUkksIG9yIG51bGwgaWYgdGhlIFVSSSBjb3VsZCBub3QgYmUgcGFyc2VkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgcGFyc2VOZnRVcmkgfSBmcm9tIFwidGhpcmR3ZWIvdXRpbHMvZW5zXCI7XG4gKiBjb25zdCBuZnRVcmkgPSBhd2FpdCBwYXJzZU5mdFVyaSh7XG4gKiAgICBjbGllbnQsXG4gKiAgICB1cmk6IFwiZWlwMTU1OjEvZXJjMTE1NToweGIzMjk3OTQ4NjkzOGFhOTY5NGJmYzg5OGYzNWRiZWQ0NTlmNDQ0MjQvMTAwNjNcIixcbiAqIH0pO1xuICpcbiAqIGNvbnNvbGUubG9nKG5mdFVyaSk7IC8vIGlwZnM6Ly9iYWZ5YmVpZW14ZjVhYmp3amJpa296NG1jM2EzZGxhNnVhbDNqc2dwZHI0Y2pyM296M2V2Znlhdmh3cS9cbiAqIGBgYFxuICpcbiAqIEBleHRlbnNpb24gRU5TXG4gKlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcGFyc2VOZnRVcmkob3B0aW9ucykge1xuICAgIGxldCB1cmkgPSBvcHRpb25zLnVyaTtcbiAgICAvLyBwYXJzZSB2YWxpZCBuZnQgc3BlYyAoQ0FJUC0yMi9DQUlQLTI5KVxuICAgIC8vIEBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9DaGFpbkFnbm9zdGljL0NBSVBzL3RyZWUvbWFzdGVyL0NBSVBzXG4gICAgaWYgKHVyaS5zdGFydHNXaXRoKFwiZGlkOm5mdDpcIikpIHtcbiAgICAgICAgLy8gY29udmVydCBESUQgdG8gQ0FJUFxuICAgICAgICB1cmkgPSB1cmkucmVwbGFjZShcImRpZDpuZnQ6XCIsIFwiXCIpLnJlcGxhY2UoL18vZywgXCIvXCIpO1xuICAgIH1cbiAgICBjb25zdCBbcmVmZXJlbmNlID0gXCJcIiwgYXNzZXRfbmFtZXNwYWNlID0gXCJcIiwgdG9rZW5JRCA9IFwiXCJdID0gdXJpLnNwbGl0KFwiL1wiKTtcbiAgICBjb25zdCBbZWlwX25hbWVzcGFjZSwgY2hhaW5JRF0gPSByZWZlcmVuY2Uuc3BsaXQoXCI6XCIpO1xuICAgIGNvbnN0IFtlcmNfbmFtZXNwYWNlLCBjb250cmFjdEFkZHJlc3NdID0gYXNzZXRfbmFtZXNwYWNlLnNwbGl0KFwiOlwiKTtcbiAgICBpZiAoIWVpcF9uYW1lc3BhY2UgfHwgZWlwX25hbWVzcGFjZS50b0xvd2VyQ2FzZSgpICE9PSBcImVpcDE1NVwiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBFSVAgbmFtZXNwYWNlLCBleHBlY3RlZCBFSVAxNTUsIGdvdDogXCIke2VpcF9uYW1lc3BhY2V9XCJgKTtcbiAgICB9XG4gICAgaWYgKCFjaGFpbklEKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNoYWluIElEIG5vdCBmb3VuZFwiKTtcbiAgICB9XG4gICAgaWYgKCFjb250cmFjdEFkZHJlc3MgfHwgIWlzQWRkcmVzcyhjb250cmFjdEFkZHJlc3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnRyYWN0IGFkZHJlc3Mgbm90IGZvdW5kXCIpO1xuICAgIH1cbiAgICBpZiAoIXRva2VuSUQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9rZW4gSUQgbm90IGZvdW5kXCIpO1xuICAgIH1cbiAgICBjb25zdCBjaGFpbiA9IGdldENhY2hlZENoYWluKE51bWJlcihjaGFpbklEKSk7XG4gICAgY29uc3QgY29udHJhY3QgPSBnZXRDb250cmFjdCh7XG4gICAgICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgY2hhaW4sXG4gICAgICAgIGNsaWVudDogb3B0aW9ucy5jbGllbnQsXG4gICAgfSk7XG4gICAgc3dpdGNoIChlcmNfbmFtZXNwYWNlKSB7XG4gICAgICAgIGNhc2UgXCJlcmM3MjFcIjoge1xuICAgICAgICAgICAgY29uc3QgeyBnZXRORlQgfSA9IGF3YWl0IGltcG9ydChcIi4uLy4uL2V4dGVuc2lvbnMvZXJjNzIxL3JlYWQvZ2V0TkZULmpzXCIpO1xuICAgICAgICAgICAgY29uc3QgbmZ0ID0gYXdhaXQgZ2V0TkZUKHtcbiAgICAgICAgICAgICAgICBjb250cmFjdCxcbiAgICAgICAgICAgICAgICB0b2tlbklkOiBCaWdJbnQodG9rZW5JRCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZnQubWV0YWRhdGEuaW1hZ2UgPz8gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZXJjMTE1NVwiOiB7XG4gICAgICAgICAgICBjb25zdCB7IGdldE5GVCB9ID0gYXdhaXQgaW1wb3J0KFwiLi4vLi4vZXh0ZW5zaW9ucy9lcmMxMTU1L3JlYWQvZ2V0TkZULmpzXCIpO1xuICAgICAgICAgICAgY29uc3QgbmZ0ID0gYXdhaXQgZ2V0TkZUKHtcbiAgICAgICAgICAgICAgICBjb250cmFjdCxcbiAgICAgICAgICAgICAgICB0b2tlbklkOiBCaWdJbnQodG9rZW5JRCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBuZnQubWV0YWRhdGEuaW1hZ2UgPz8gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgRVJDIG5hbWVzcGFjZSwgZXhwZWN0ZWQgRVJDNzIxIG9yIEVSQzExNTUsIGdvdDogXCIke2VyY19uYW1lc3BhY2V9XCJgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlTmZ0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/nft/parseNft.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/text-decoder.js":
/*!**************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/text-decoder.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cachedTextDecoder: function() { return /* binding */ cachedTextDecoder; }\n/* harmony export */ });\nlet textDecoder;\n/**\n * Re-using the same textdecoder is faster.\n *\n * @returns\n * @internal\n */\nfunction cachedTextDecoder() {\n    if (!textDecoder) {\n        textDecoder = new TextDecoder();\n    }\n    return textDecoder;\n}\n//# sourceMappingURL=text-decoder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS91dGlscy90ZXh0LWRlY29kZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RoaXJkd2ViL2Rpc3QvZXNtL3V0aWxzL3RleHQtZGVjb2Rlci5qcz9jZGFhIl0sInNvdXJjZXNDb250ZW50IjpbImxldCB0ZXh0RGVjb2Rlcjtcbi8qKlxuICogUmUtdXNpbmcgdGhlIHNhbWUgdGV4dGRlY29kZXIgaXMgZmFzdGVyLlxuICpcbiAqIEByZXR1cm5zXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhY2hlZFRleHREZWNvZGVyKCkge1xuICAgIGlmICghdGV4dERlY29kZXIpIHtcbiAgICAgICAgdGV4dERlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRleHREZWNvZGVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGV4dC1kZWNvZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/text-decoder.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/uint8-array.js":
/*!*************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/uint8-array.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   areUint8ArraysEqual: function() { return /* binding */ areUint8ArraysEqual; },\n/* harmony export */   base64ToString: function() { return /* binding */ base64ToString; },\n/* harmony export */   base64ToUint8Array: function() { return /* binding */ base64ToUint8Array; },\n/* harmony export */   base64UrlToBase64: function() { return /* binding */ base64UrlToBase64; },\n/* harmony export */   compareUint8Arrays: function() { return /* binding */ compareUint8Arrays; },\n/* harmony export */   concatUint8Arrays: function() { return /* binding */ concatUint8Arrays; },\n/* harmony export */   isUint8Array: function() { return /* binding */ isUint8Array; },\n/* harmony export */   uint8ArrayToBase64: function() { return /* binding */ uint8ArrayToBase64; }\n/* harmony export */ });\n/* harmony import */ var _text_decoder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text-decoder.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/text-decoder.js\");\n\nconst uint8ArrayStringified = \"[object Uint8Array]\";\n/**\n * Throw a `TypeError` if the given value is not an instance of `Uint8Array`.\n * @example\n * ```ts\n * import {assertUint8Array} from 'uint8array-extras';\n *\n * try {\n * assertUint8Array(new ArrayBuffer(10)); // Throws a TypeError\n * } catch (error) {\n * console.error(error.message);\n * }\n * ```\n */\nfunction assertUint8Array(value) {\n    if (!isUint8Array(value)) {\n        throw new TypeError(`Expected \\`Uint8Array\\`, got \\`${typeof value}\\``);\n    }\n}\n/**\n * Check if the given value is an instance of `Uint8Array`.\n *\n * Replacement for [`Buffer.isBuffer()`](https://nodejs.org/api/buffer.html#static-method-bufferisbufferobj).\n * @example\n * ```ts\n * import {isUint8Array} from 'uint8array-extras';\n *\n * console.log(isUint8Array(new Uint8Array()));\n * //=> true\n *\n * console.log(isUint8Array(Buffer.from('x')));\n * //=> true\n *\n * console.log(isUint8Array(new ArrayBuffer(10)));\n * //=> false\n * ```\n */\nfunction isUint8Array(value) {\n    if (!value) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    return Object.prototype.toString.call(value) === uint8ArrayStringified;\n}\n/**\n * Check if two arrays are identical by verifying that they contain the same bytes in the same sequence.\n *\n * Replacement for [`Buffer#equals()`](https://nodejs.org/api/buffer.html#bufequalsotherbuffer).\n * @example\n * ```ts\n * import {areUint8ArraysEqual} from 'uint8array-extras';\n *\n * const a = new Uint8Array([1, 2, 3]);\n * const b = new Uint8Array([1, 2, 3]);\n * const c = new Uint8Array([4, 5, 6]);\n *\n * console.log(areUint8ArraysEqual(a, b));\n * //=> true\n *\n * console.log(areUint8ArraysEqual(a, c));\n * //=> false\n * ```\n */\nfunction areUint8ArraysEqual(a, b) {\n    assertUint8Array(a);\n    assertUint8Array(b);\n    if (a === b) {\n        return true;\n    }\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let index = 0; index < a.length; index++) {\n        if (a[index] !== b[index]) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Convert a `Uint8Array` (containing a UTF-8 string) to a string.\n *\n * Replacement for [`Buffer#toString()`](https://nodejs.org/api/buffer.html#buftostringencoding-start-end).\n * @example\n * ```ts\n * import {uint8ArrayToString} from 'uint8array-extras';\n *\n * const byteArray = new Uint8Array([72, 101, 108, 108, 111]);\n *\n * console.log(uint8ArrayToString(byteArray));\n * //=> 'Hello'\n * ```\n */\nfunction uint8ArrayToString(array) {\n    assertUint8Array(array);\n    return (0,_text_decoder_js__WEBPACK_IMPORTED_MODULE_0__.cachedTextDecoder)().decode(array);\n}\nfunction assertString(value) {\n    if (typeof value !== \"string\") {\n        throw new TypeError(`Expected \\`string\\`, got \\`${typeof value}\\``);\n    }\n}\nfunction base64UrlToBase64(base64url) {\n    // Replace Base64URL characters with Base64 characters\n    let base64 = base64url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    // Add padding if necessary\n    const padding = base64.length % 4;\n    if (padding !== 0) {\n        base64 += \"=\".repeat(4 - padding);\n    }\n    return base64;\n}\n/**\n * Convert a Base64-encoded or [Base64URL](https://base64.guru/standards/base64url)-encoded string to a `Uint8Array`.\n *\n * Replacement for [`Buffer.from('SGVsbG8=', 'base64')`](https://nodejs.org/api/buffer.html#static-method-bufferfromstring-encoding).\n * @example\n * ```ts\n * import {base64ToUint8Array} from 'uint8array-extras';\n *\n * console.log(base64ToUint8Array('SGVsbG8='));\n * //=> Uint8Array [72, 101, 108, 108, 111]\n * ```\n */\nfunction base64ToUint8Array(base64String) {\n    assertString(base64String);\n    return Uint8Array.from(globalThis.atob(base64UrlToBase64(base64String)), \n    // biome-ignore lint/style/noNonNullAssertion: we know that the code points exist\n    (x) => x.codePointAt(0));\n}\n/**\n * Decode a Base64-encoded or [Base64URL](https://base64.guru/standards/base64url)-encoded string to a string.\n *\n * Replacement for `Buffer.from('SGVsbG8=', 'base64').toString()` and [`atob()`](https://developer.mozilla.org/en-US/docs/Web/API/atob).\n * @example\n * ```ts\n * import {base64ToString} from 'uint8array-extras';\n *\n * console.log(base64ToString('SGVsbG8='));\n * //=> 'Hello'\n * ```\n */\nfunction base64ToString(base64String) {\n    assertString(base64String);\n    return uint8ArrayToString(base64ToUint8Array(base64String));\n}\nfunction base64ToBase64Url(base64) {\n    return base64.replaceAll(\"+\", \"-\").replaceAll(\"/\", \"_\").replace(/=+$/, \"\");\n}\n// Reference: https://phuoc.ng/collection/this-vs-that/concat-vs-push/\nconst MAX_BLOCK_SIZE = 65_535;\nfunction uint8ArrayToBase64(array, { urlSafe = false } = {}) {\n    assertUint8Array(array);\n    let base64;\n    if (array.length < MAX_BLOCK_SIZE) {\n        // Required as `btoa` and `atob` don't properly support Unicode: https://developer.mozilla.org/en-US/docs/Glossary/Base64#the_unicode_problem\n        // @ts-expect-error - TS doesn't know about `String#fromCodePoint`\n        base64 = globalThis.btoa(String.fromCodePoint.apply(this, array));\n    }\n    else {\n        base64 = \"\";\n        for (const value of array) {\n            base64 += String.fromCodePoint(value);\n        }\n        base64 = globalThis.btoa(base64);\n    }\n    return urlSafe ? base64ToBase64Url(base64) : base64;\n}\nfunction concatUint8Arrays(arrays, totalLength) {\n    if (arrays.length === 0) {\n        return new Uint8Array(0);\n    }\n    const calculatedTotalLength = totalLength ??\n        arrays.reduce((accumulator, currentValue) => accumulator + currentValue.length, 0);\n    const returnValue = new Uint8Array(calculatedTotalLength);\n    let offset = 0;\n    for (const array of arrays) {\n        assertUint8Array(array);\n        returnValue.set(array, offset);\n        offset += array.length;\n    }\n    return returnValue;\n}\nfunction compareUint8Arrays(a, b) {\n    assertUint8Array(a);\n    assertUint8Array(b);\n    const length = Math.min(a.length, b.length);\n    for (let index = 0; index < length; index++) {\n        // biome-ignore lint/style/noNonNullAssertion: we check the length above so the index is always in bounds\n        const diff = a[index] - b[index];\n        if (diff !== 0) {\n            return Math.sign(diff);\n        }\n    }\n    // At this point, all the compared elements are equal.\n    // The shorter array should come first if the arrays are of different lengths.\n    return Math.sign(a.length - b.length);\n}\n//# sourceMappingURL=uint8-array.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/uint8-array.js\n"));

/***/ })

}]);