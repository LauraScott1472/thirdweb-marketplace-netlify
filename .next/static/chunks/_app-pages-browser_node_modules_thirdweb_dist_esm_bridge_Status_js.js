"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_bridge_Status_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/bridge/Status.js":
/*!*********************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/bridge/Status.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   status: function() { return /* binding */ status; }\n/* harmony export */ });\n/* harmony import */ var _utils_domains_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/domains.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/domains.js\");\n/* harmony import */ var _utils_fetch_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/fetch.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/fetch.js\");\n/* harmony import */ var _types_Errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/Errors.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/bridge/types/Errors.js\");\n\n\n\n/**\n * Retrieves a Universal Bridge quote for the provided sell intent. The quote will specify the expected `destinationAmount` that will be received in exchange for the specified `originAmount`, which is specified with the `sellAmountWei` option.\n *\n * The returned status will include both the origin and destination transactions and any finalized amounts for the route.\n *\n * @example\n * ```typescript\n * import { Bridge } from \"thirdweb\";\n *\n * const status = await Bridge.status({\n *   transactionHash: \"0xe199ef82a0b6215221536e18ec512813c1aa10b4f5ed0d4dfdfcd703578da56d\",\n *   chainId: 8453,\n *   client: thirdwebClient,\n * });\n * ```\n *\n * If the transaction is complete, a response might look like:\n * ```typescript\n * {\n *   status: 'COMPLETED',\n *   originAmount: 200000000000000n,\n *   destinationAmount: 188625148000000n,\n *   originChainId: 8453,\n *   destinationChainId: 2741,\n *   originTokenAddress: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n *   destinationTokenAddress: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n *   transactions: [\n *     {\n *       chainId: 8453,\n *       transactionHash: '0xe199ef82a0b6215221536e18ec512813c1aa10b4f5ed0d4dfdfcd703578da56d'\n *     },\n *     {\n *       chainId: 2741,\n *       transactionHash: '0xa70a82f42330f54be95a542e1fcfe6ed2dd9f07fb8c82ae67afb4342319f7433'\n *     }\n *   ],\n *   purchaseData: {\n *     foo: \"bar\"\n *   }\n * }\n * ```\n *\n * If the origin transaction hasn't been mined yet, a response might look like:\n * ```typescript\n * {\n *   status: \"NOT_FOUND\",\n * }\n * ```\n * This is to allow you to poll for the status without catching an error. Be sure your transaction hash and chain are correct though, as this could also represent a legitimate 404 if the transaction doesn't exist.\n *\n * If the transaction is still pending, a response might look like:\n * ```typescript\n * {\n *   status: \"PENDING\",\n *   originAmount: 1000000000000000000n,\n *   originChainId: 466,\n *   destinationChainId: 1,\n *   originTokenAddress: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n *   destinationTokenAddress: \"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\",\n *   transactions: [\n *     {\n *       transactionHash: \"0xe199ef82a0b6215221536e18ec512813c1aa10b4f5ed0d4dfdfcd703578da56d\",\n *       chainId: 466,\n *     }\n *   ]\n * }\n * ```\n *\n * If the transaction failed, a response might look like:\n * ```typescript\n * {\n *   status: \"FAILED\",\n *   transactions: [\n *     {\n *       transactionHash: \"0xe199ef82a0b6215221536e18ec512813c1aa10b4f5ed0d4dfdfcd703578da56d\",\n *       chainId: 466,\n *     }\n *   ]\n * }\n * ```\n *\n * This status is for a **single origin transaction only**. If your route involves multiple transactions, you'll need to get the status for each of them individually.\n *\n * If sending multiple dependent sequential transactions, wait until `status` returns `COMPLETED` before sending the next transaction.\n *\n * You can access this function's input and output types with `status.Options` and `status.Result`, respectively.\n *\n * @param options - The options for the quote.\n * @param options.transactionHash - The hash of the origin transaction to get the bridge status for.\n * @param options.chainId - The chain ID of the origin token.\n * @param options.transactionId - The transaction ID received from the `prepare` request.\n * @param options.client - Your thirdweb client.\n *\n * @returns A promise that resolves to a status object for the transaction.\n *\n * @throws Will throw an error if there is an issue fetching the status.\n * @bridge\n * @beta\n */\nasync function status(options) {\n    const { transactionHash, client, transactionId } = options;\n    const chainId = \"chainId\" in options ? options.chainId : options.chain.id;\n    const clientFetch = (0,_utils_fetch_js__WEBPACK_IMPORTED_MODULE_0__.getClientFetch)(client);\n    const url = new URL(`${(0,_utils_domains_js__WEBPACK_IMPORTED_MODULE_1__.getThirdwebBaseUrl)(\"bridge\")}/v1/status`);\n    url.searchParams.set(\"transactionHash\", transactionHash);\n    url.searchParams.set(\"chainId\", chainId.toString());\n    if (transactionId) {\n        url.searchParams.set(\"transactionId\", transactionId);\n    }\n    const response = await clientFetch(url.toString());\n    if (!response.ok) {\n        const errorJson = await response.json();\n        throw new _types_Errors_js__WEBPACK_IMPORTED_MODULE_2__.ApiError({\n            code: errorJson.code || \"UNKNOWN_ERROR\",\n            correlationId: errorJson.correlationId || undefined,\n            message: errorJson.message || response.statusText,\n            statusCode: response.status,\n        });\n    }\n    const { data } = await response.json();\n    if (data.status === \"FAILED\") {\n        return {\n            paymentId: data.paymentId,\n            status: \"FAILED\",\n            transactions: data.transactions,\n        };\n    }\n    if (data.status === \"PENDING\") {\n        return {\n            destinationChainId: data.destinationChainId,\n            destinationToken: data.destinationToken,\n            destinationTokenAddress: data.destinationTokenAddress,\n            originAmount: BigInt(data.originAmount),\n            originChainId: data.originChainId,\n            originToken: data.originToken,\n            originTokenAddress: data.originTokenAddress,\n            paymentId: data.paymentId,\n            purchaseData: data.purchaseData,\n            receiver: data.receiver,\n            sender: data.sender,\n            status: \"PENDING\",\n            transactions: data.transactions,\n        };\n    }\n    if (data.status === \"NOT_FOUND\") {\n        return {\n            paymentId: data.paymentId,\n            status: \"NOT_FOUND\",\n            transactions: [],\n        };\n    }\n    return {\n        destinationAmount: BigInt(data.destinationAmount),\n        destinationChainId: data.destinationChainId,\n        destinationToken: data.destinationToken,\n        destinationTokenAddress: data.destinationTokenAddress,\n        originAmount: BigInt(data.originAmount),\n        originChainId: data.originChainId,\n        originToken: data.originToken,\n        originTokenAddress: data.originTokenAddress,\n        paymentId: data.paymentId,\n        purchaseData: data.purchaseData,\n        receiver: data.receiver,\n        sender: data.sender,\n        status: \"COMPLETED\",\n        transactions: data.transactions,\n    };\n}\n//# sourceMappingURL=Status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9icmlkZ2UvU3RhdHVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUQ7QUFDTjtBQUNOO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSx5Q0FBeUM7QUFDckQ7QUFDQSx3QkFBd0IsK0RBQWM7QUFDdEMsMkJBQTJCLHFFQUFrQixXQUFXO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isc0RBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RoaXJkd2ViL2Rpc3QvZXNtL2JyaWRnZS9TdGF0dXMuanM/OTM0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRUaGlyZHdlYkJhc2VVcmwgfSBmcm9tIFwiLi4vdXRpbHMvZG9tYWlucy5qc1wiO1xuaW1wb3J0IHsgZ2V0Q2xpZW50RmV0Y2ggfSBmcm9tIFwiLi4vdXRpbHMvZmV0Y2guanNcIjtcbmltcG9ydCB7IEFwaUVycm9yIH0gZnJvbSBcIi4vdHlwZXMvRXJyb3JzLmpzXCI7XG4vKipcbiAqIFJldHJpZXZlcyBhIFVuaXZlcnNhbCBCcmlkZ2UgcXVvdGUgZm9yIHRoZSBwcm92aWRlZCBzZWxsIGludGVudC4gVGhlIHF1b3RlIHdpbGwgc3BlY2lmeSB0aGUgZXhwZWN0ZWQgYGRlc3RpbmF0aW9uQW1vdW50YCB0aGF0IHdpbGwgYmUgcmVjZWl2ZWQgaW4gZXhjaGFuZ2UgZm9yIHRoZSBzcGVjaWZpZWQgYG9yaWdpbkFtb3VudGAsIHdoaWNoIGlzIHNwZWNpZmllZCB3aXRoIHRoZSBgc2VsbEFtb3VudFdlaWAgb3B0aW9uLlxuICpcbiAqIFRoZSByZXR1cm5lZCBzdGF0dXMgd2lsbCBpbmNsdWRlIGJvdGggdGhlIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gdHJhbnNhY3Rpb25zIGFuZCBhbnkgZmluYWxpemVkIGFtb3VudHMgZm9yIHRoZSByb3V0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQnJpZGdlIH0gZnJvbSBcInRoaXJkd2ViXCI7XG4gKlxuICogY29uc3Qgc3RhdHVzID0gYXdhaXQgQnJpZGdlLnN0YXR1cyh7XG4gKiAgIHRyYW5zYWN0aW9uSGFzaDogXCIweGUxOTllZjgyYTBiNjIxNTIyMTUzNmUxOGVjNTEyODEzYzFhYTEwYjRmNWVkMGQ0ZGZkZmNkNzAzNTc4ZGE1NmRcIixcbiAqICAgY2hhaW5JZDogODQ1MyxcbiAqICAgY2xpZW50OiB0aGlyZHdlYkNsaWVudCxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogSWYgdGhlIHRyYW5zYWN0aW9uIGlzIGNvbXBsZXRlLCBhIHJlc3BvbnNlIG1pZ2h0IGxvb2sgbGlrZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHtcbiAqICAgc3RhdHVzOiAnQ09NUExFVEVEJyxcbiAqICAgb3JpZ2luQW1vdW50OiAyMDAwMDAwMDAwMDAwMDBuLFxuICogICBkZXN0aW5hdGlvbkFtb3VudDogMTg4NjI1MTQ4MDAwMDAwbixcbiAqICAgb3JpZ2luQ2hhaW5JZDogODQ1MyxcbiAqICAgZGVzdGluYXRpb25DaGFpbklkOiAyNzQxLFxuICogICBvcmlnaW5Ub2tlbkFkZHJlc3M6ICcweEVlZWVlRWVlZUVlRWVlRWVFZUVlZUVFRWVlZWVFZWVlZWVlZUVFZUUnLFxuICogICBkZXN0aW5hdGlvblRva2VuQWRkcmVzczogJzB4RWVlZWVFZWVlRWVFZWVFZUVlRWVlRUVFZWVlZUVlZWVlZWVlRUVlRScsXG4gKiAgIHRyYW5zYWN0aW9uczogW1xuICogICAgIHtcbiAqICAgICAgIGNoYWluSWQ6IDg0NTMsXG4gKiAgICAgICB0cmFuc2FjdGlvbkhhc2g6ICcweGUxOTllZjgyYTBiNjIxNTIyMTUzNmUxOGVjNTEyODEzYzFhYTEwYjRmNWVkMGQ0ZGZkZmNkNzAzNTc4ZGE1NmQnXG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICBjaGFpbklkOiAyNzQxLFxuICogICAgICAgdHJhbnNhY3Rpb25IYXNoOiAnMHhhNzBhODJmNDIzMzBmNTRiZTk1YTU0MmUxZmNmZTZlZDJkZDlmMDdmYjhjODJhZTY3YWZiNDM0MjMxOWY3NDMzJ1xuICogICAgIH1cbiAqICAgXSxcbiAqICAgcHVyY2hhc2VEYXRhOiB7XG4gKiAgICAgZm9vOiBcImJhclwiXG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIElmIHRoZSBvcmlnaW4gdHJhbnNhY3Rpb24gaGFzbid0IGJlZW4gbWluZWQgeWV0LCBhIHJlc3BvbnNlIG1pZ2h0IGxvb2sgbGlrZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHtcbiAqICAgc3RhdHVzOiBcIk5PVF9GT1VORFwiLFxuICogfVxuICogYGBgXG4gKiBUaGlzIGlzIHRvIGFsbG93IHlvdSB0byBwb2xsIGZvciB0aGUgc3RhdHVzIHdpdGhvdXQgY2F0Y2hpbmcgYW4gZXJyb3IuIEJlIHN1cmUgeW91ciB0cmFuc2FjdGlvbiBoYXNoIGFuZCBjaGFpbiBhcmUgY29ycmVjdCB0aG91Z2gsIGFzIHRoaXMgY291bGQgYWxzbyByZXByZXNlbnQgYSBsZWdpdGltYXRlIDQwNCBpZiB0aGUgdHJhbnNhY3Rpb24gZG9lc24ndCBleGlzdC5cbiAqXG4gKiBJZiB0aGUgdHJhbnNhY3Rpb24gaXMgc3RpbGwgcGVuZGluZywgYSByZXNwb25zZSBtaWdodCBsb29rIGxpa2U6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiB7XG4gKiAgIHN0YXR1czogXCJQRU5ESU5HXCIsXG4gKiAgIG9yaWdpbkFtb3VudDogMTAwMDAwMDAwMDAwMDAwMDAwMG4sXG4gKiAgIG9yaWdpbkNoYWluSWQ6IDQ2NixcbiAqICAgZGVzdGluYXRpb25DaGFpbklkOiAxLFxuICogICBvcmlnaW5Ub2tlbkFkZHJlc3M6IFwiMHhFZWVlZUVlZWVFZUVlZUVlRWVFZWVFRUVlZWVlRWVlZWVlZWVFRWVFXCIsXG4gKiAgIGRlc3RpbmF0aW9uVG9rZW5BZGRyZXNzOiBcIjB4RWVlZWVFZWVlRWVFZWVFZUVlRWVlRUVFZWVlZUVlZWVlZWVlRUVlRVwiLFxuICogICB0cmFuc2FjdGlvbnM6IFtcbiAqICAgICB7XG4gKiAgICAgICB0cmFuc2FjdGlvbkhhc2g6IFwiMHhlMTk5ZWY4MmEwYjYyMTUyMjE1MzZlMThlYzUxMjgxM2MxYWExMGI0ZjVlZDBkNGRmZGZjZDcwMzU3OGRhNTZkXCIsXG4gKiAgICAgICBjaGFpbklkOiA0NjYsXG4gKiAgICAgfVxuICogICBdXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBJZiB0aGUgdHJhbnNhY3Rpb24gZmFpbGVkLCBhIHJlc3BvbnNlIG1pZ2h0IGxvb2sgbGlrZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHtcbiAqICAgc3RhdHVzOiBcIkZBSUxFRFwiLFxuICogICB0cmFuc2FjdGlvbnM6IFtcbiAqICAgICB7XG4gKiAgICAgICB0cmFuc2FjdGlvbkhhc2g6IFwiMHhlMTk5ZWY4MmEwYjYyMTUyMjE1MzZlMThlYzUxMjgxM2MxYWExMGI0ZjVlZDBkNGRmZGZjZDcwMzU3OGRhNTZkXCIsXG4gKiAgICAgICBjaGFpbklkOiA0NjYsXG4gKiAgICAgfVxuICogICBdXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUaGlzIHN0YXR1cyBpcyBmb3IgYSAqKnNpbmdsZSBvcmlnaW4gdHJhbnNhY3Rpb24gb25seSoqLiBJZiB5b3VyIHJvdXRlIGludm9sdmVzIG11bHRpcGxlIHRyYW5zYWN0aW9ucywgeW91J2xsIG5lZWQgdG8gZ2V0IHRoZSBzdGF0dXMgZm9yIGVhY2ggb2YgdGhlbSBpbmRpdmlkdWFsbHkuXG4gKlxuICogSWYgc2VuZGluZyBtdWx0aXBsZSBkZXBlbmRlbnQgc2VxdWVudGlhbCB0cmFuc2FjdGlvbnMsIHdhaXQgdW50aWwgYHN0YXR1c2AgcmV0dXJucyBgQ09NUExFVEVEYCBiZWZvcmUgc2VuZGluZyB0aGUgbmV4dCB0cmFuc2FjdGlvbi5cbiAqXG4gKiBZb3UgY2FuIGFjY2VzcyB0aGlzIGZ1bmN0aW9uJ3MgaW5wdXQgYW5kIG91dHB1dCB0eXBlcyB3aXRoIGBzdGF0dXMuT3B0aW9uc2AgYW5kIGBzdGF0dXMuUmVzdWx0YCwgcmVzcGVjdGl2ZWx5LlxuICpcbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBxdW90ZS5cbiAqIEBwYXJhbSBvcHRpb25zLnRyYW5zYWN0aW9uSGFzaCAtIFRoZSBoYXNoIG9mIHRoZSBvcmlnaW4gdHJhbnNhY3Rpb24gdG8gZ2V0IHRoZSBicmlkZ2Ugc3RhdHVzIGZvci5cbiAqIEBwYXJhbSBvcHRpb25zLmNoYWluSWQgLSBUaGUgY2hhaW4gSUQgb2YgdGhlIG9yaWdpbiB0b2tlbi5cbiAqIEBwYXJhbSBvcHRpb25zLnRyYW5zYWN0aW9uSWQgLSBUaGUgdHJhbnNhY3Rpb24gSUQgcmVjZWl2ZWQgZnJvbSB0aGUgYHByZXBhcmVgIHJlcXVlc3QuXG4gKiBAcGFyYW0gb3B0aW9ucy5jbGllbnQgLSBZb3VyIHRoaXJkd2ViIGNsaWVudC5cbiAqXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIHN0YXR1cyBvYmplY3QgZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBAdGhyb3dzIFdpbGwgdGhyb3cgYW4gZXJyb3IgaWYgdGhlcmUgaXMgYW4gaXNzdWUgZmV0Y2hpbmcgdGhlIHN0YXR1cy5cbiAqIEBicmlkZ2VcbiAqIEBiZXRhXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdGF0dXMob3B0aW9ucykge1xuICAgIGNvbnN0IHsgdHJhbnNhY3Rpb25IYXNoLCBjbGllbnQsIHRyYW5zYWN0aW9uSWQgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgY2hhaW5JZCA9IFwiY2hhaW5JZFwiIGluIG9wdGlvbnMgPyBvcHRpb25zLmNoYWluSWQgOiBvcHRpb25zLmNoYWluLmlkO1xuICAgIGNvbnN0IGNsaWVudEZldGNoID0gZ2V0Q2xpZW50RmV0Y2goY2xpZW50KTtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGAke2dldFRoaXJkd2ViQmFzZVVybChcImJyaWRnZVwiKX0vdjEvc3RhdHVzYCk7XG4gICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJ0cmFuc2FjdGlvbkhhc2hcIiwgdHJhbnNhY3Rpb25IYXNoKTtcbiAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChcImNoYWluSWRcIiwgY2hhaW5JZC50b1N0cmluZygpKTtcbiAgICBpZiAodHJhbnNhY3Rpb25JZCkge1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldChcInRyYW5zYWN0aW9uSWRcIiwgdHJhbnNhY3Rpb25JZCk7XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50RmV0Y2godXJsLnRvU3RyaW5nKCkpO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB0aHJvdyBuZXcgQXBpRXJyb3Ioe1xuICAgICAgICAgICAgY29kZTogZXJyb3JKc29uLmNvZGUgfHwgXCJVTktOT1dOX0VSUk9SXCIsXG4gICAgICAgICAgICBjb3JyZWxhdGlvbklkOiBlcnJvckpzb24uY29ycmVsYXRpb25JZCB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICBtZXNzYWdlOiBlcnJvckpzb24ubWVzc2FnZSB8fCByZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgaWYgKGRhdGEuc3RhdHVzID09PSBcIkZBSUxFRFwiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXltZW50SWQ6IGRhdGEucGF5bWVudElkLFxuICAgICAgICAgICAgc3RhdHVzOiBcIkZBSUxFRFwiLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiBkYXRhLnRyYW5zYWN0aW9ucyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGRhdGEuc3RhdHVzID09PSBcIlBFTkRJTkdcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVzdGluYXRpb25DaGFpbklkOiBkYXRhLmRlc3RpbmF0aW9uQ2hhaW5JZCxcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uVG9rZW46IGRhdGEuZGVzdGluYXRpb25Ub2tlbixcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uVG9rZW5BZGRyZXNzOiBkYXRhLmRlc3RpbmF0aW9uVG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgb3JpZ2luQW1vdW50OiBCaWdJbnQoZGF0YS5vcmlnaW5BbW91bnQpLFxuICAgICAgICAgICAgb3JpZ2luQ2hhaW5JZDogZGF0YS5vcmlnaW5DaGFpbklkLFxuICAgICAgICAgICAgb3JpZ2luVG9rZW46IGRhdGEub3JpZ2luVG9rZW4sXG4gICAgICAgICAgICBvcmlnaW5Ub2tlbkFkZHJlc3M6IGRhdGEub3JpZ2luVG9rZW5BZGRyZXNzLFxuICAgICAgICAgICAgcGF5bWVudElkOiBkYXRhLnBheW1lbnRJZCxcbiAgICAgICAgICAgIHB1cmNoYXNlRGF0YTogZGF0YS5wdXJjaGFzZURhdGEsXG4gICAgICAgICAgICByZWNlaXZlcjogZGF0YS5yZWNlaXZlcixcbiAgICAgICAgICAgIHNlbmRlcjogZGF0YS5zZW5kZXIsXG4gICAgICAgICAgICBzdGF0dXM6IFwiUEVORElOR1wiLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiBkYXRhLnRyYW5zYWN0aW9ucyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGRhdGEuc3RhdHVzID09PSBcIk5PVF9GT1VORFwiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXltZW50SWQ6IGRhdGEucGF5bWVudElkLFxuICAgICAgICAgICAgc3RhdHVzOiBcIk5PVF9GT1VORFwiLFxuICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiBbXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVzdGluYXRpb25BbW91bnQ6IEJpZ0ludChkYXRhLmRlc3RpbmF0aW9uQW1vdW50KSxcbiAgICAgICAgZGVzdGluYXRpb25DaGFpbklkOiBkYXRhLmRlc3RpbmF0aW9uQ2hhaW5JZCxcbiAgICAgICAgZGVzdGluYXRpb25Ub2tlbjogZGF0YS5kZXN0aW5hdGlvblRva2VuLFxuICAgICAgICBkZXN0aW5hdGlvblRva2VuQWRkcmVzczogZGF0YS5kZXN0aW5hdGlvblRva2VuQWRkcmVzcyxcbiAgICAgICAgb3JpZ2luQW1vdW50OiBCaWdJbnQoZGF0YS5vcmlnaW5BbW91bnQpLFxuICAgICAgICBvcmlnaW5DaGFpbklkOiBkYXRhLm9yaWdpbkNoYWluSWQsXG4gICAgICAgIG9yaWdpblRva2VuOiBkYXRhLm9yaWdpblRva2VuLFxuICAgICAgICBvcmlnaW5Ub2tlbkFkZHJlc3M6IGRhdGEub3JpZ2luVG9rZW5BZGRyZXNzLFxuICAgICAgICBwYXltZW50SWQ6IGRhdGEucGF5bWVudElkLFxuICAgICAgICBwdXJjaGFzZURhdGE6IGRhdGEucHVyY2hhc2VEYXRhLFxuICAgICAgICByZWNlaXZlcjogZGF0YS5yZWNlaXZlcixcbiAgICAgICAgc2VuZGVyOiBkYXRhLnNlbmRlcixcbiAgICAgICAgc3RhdHVzOiBcIkNPTVBMRVRFRFwiLFxuICAgICAgICB0cmFuc2FjdGlvbnM6IGRhdGEudHJhbnNhY3Rpb25zLFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGF0dXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/bridge/Status.js\n"));

/***/ })

}]);