"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_transaction_actions_gasless_providers_openz-778d1a"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js ***!
  \**********************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prepareOpenZeppelinTransaction: function() { return /* binding */ prepareOpenZeppelinTransaction; },\n/* harmony export */   relayOpenZeppelinTransaction: function() { return /* binding */ relayOpenZeppelinTransaction; }\n/* harmony export */ });\n/* harmony import */ var _contract_contract_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../contract/contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/contract/contract.js\");\n/* harmony import */ var _utils_encoding_helpers_is_hex_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../utils/encoding/helpers/is-hex.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/helpers/is-hex.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../utils/json.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/json.js\");\n/* harmony import */ var _read_contract_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n\n\n\n\n/**\n * @internal - only exported for testing\n */\nasync function prepareOpenZeppelinTransaction({ account, serializableTransaction, transaction, gasless, }) {\n    const forrwaderContract = (0,_contract_contract_js__WEBPACK_IMPORTED_MODULE_0__.getContract)({\n        address: gasless.relayerForwarderAddress,\n        chain: transaction.chain,\n        client: transaction.client,\n    });\n    const nonce = await (0,_read_contract_js__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n        contract: forrwaderContract,\n        method: \"function getNonce(address) view returns (uint256)\",\n        params: [account.address],\n    });\n    const [signature, message] = await (async () => {\n        // TODO: handle special case for `approve` -> `permit` transactions\n        if (!serializableTransaction.to) {\n            throw new Error(\"OpenZeppelin transactions must have a 'to' address\");\n        }\n        if (!serializableTransaction.gas) {\n            throw new Error(\"OpenZeppelin transactions must have a 'gas' value\");\n        }\n        if (!serializableTransaction.data) {\n            throw new Error(\"OpenZeppelin transactions must have a 'data' value\");\n        }\n        // chainless support!\n        if (gasless.experimentalChainlessSupport) {\n            const message = {\n                chainid: BigInt(transaction.chain.id),\n                data: serializableTransaction.data,\n                from: account.address,\n                gas: serializableTransaction.gas,\n                nonce: nonce,\n                to: serializableTransaction.to,\n                value: 0n,\n            };\n            return [\n                await account.signTypedData({\n                    domain: {\n                        name: \"GSNv2 Forwarder\",\n                        verifyingContract: forrwaderContract.address,\n                        version: \"0.0.1\",\n                    },\n                    message,\n                    primaryType: \"ForwardRequest\",\n                    types: { ForwardRequest: ChainAwareForwardRequest },\n                }),\n                message,\n            ];\n        }\n        // else non-chainless support\n        const message = {\n            data: serializableTransaction.data,\n            from: account.address,\n            gas: serializableTransaction.gas,\n            nonce: nonce,\n            to: serializableTransaction.to,\n            value: 0n,\n        };\n        return [\n            await account.signTypedData({\n                domain: {\n                    chainId: transaction.chain.id,\n                    name: gasless.domainName ?? \"GSNv2 Forwarder\",\n                    verifyingContract: forrwaderContract.address,\n                    version: gasless.domainVersion ?? \"0.0.1\",\n                },\n                message,\n                primaryType: \"ForwardRequest\",\n                types: { ForwardRequest },\n            }),\n            message,\n        ];\n    })();\n    // TODO: handle special case for `approve` -> `permit`\n    const messageType = \"forward\";\n    return { message, messageType, signature };\n}\nconst ForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n];\nconst ChainAwareForwardRequest = [\n    { name: \"from\", type: \"address\" },\n    { name: \"to\", type: \"address\" },\n    { name: \"value\", type: \"uint256\" },\n    { name: \"gas\", type: \"uint256\" },\n    { name: \"nonce\", type: \"uint256\" },\n    { name: \"data\", type: \"bytes\" },\n    { name: \"chainid\", type: \"uint256\" },\n];\n/**\n * @internal\n */\nasync function relayOpenZeppelinTransaction(options) {\n    const { message, messageType, signature } = await prepareOpenZeppelinTransaction(options);\n    const response = await fetch(options.gasless.relayerUrl, {\n        body: (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)({\n            forwarderAddress: options.gasless.relayerForwarderAddress,\n            request: message,\n            signature,\n            type: messageType,\n        }),\n        method: \"POST\",\n    });\n    if (!response.ok) {\n        throw new Error(`Failed to send transaction: ${await response.text()}`);\n    }\n    const json = await response.json();\n    if (!json.result) {\n        throw new Error(`Relay transaction failed: ${json.message}`);\n    }\n    const transactionHash = JSON.parse(json.result).txHash;\n    if ((0,_utils_encoding_helpers_is_hex_js__WEBPACK_IMPORTED_MODULE_3__.isHex)(transactionHash)) {\n        return {\n            chain: options.transaction.chain,\n            client: options.transaction.client,\n            transactionHash,\n        };\n    }\n    throw new Error(`Failed to send transaction: ${(0,_utils_json_js__WEBPACK_IMPORTED_MODULE_2__.stringify)(json)}`);\n}\n//# sourceMappingURL=openzeppelin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS90cmFuc2FjdGlvbi9hY3Rpb25zL2dhc2xlc3MvcHJvdmlkZXJzL29wZW56ZXBwZWxpbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0Q7QUFDTTtBQUNmO0FBQ0c7QUFDekQ7QUFDQTtBQUNBO0FBQ08sZ0RBQWdELHlEQUF5RDtBQUNoSCw4QkFBOEIsa0VBQVc7QUFDekM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHdCQUF3QiwrREFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLDZCQUE2QiwwQ0FBMEM7QUFDdkUsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSx5QkFBeUIsZ0JBQWdCO0FBQ3pDLGFBQWE7QUFDYjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLE1BQU0sK0JBQStCO0FBQ3JDLE1BQU0sNkJBQTZCO0FBQ25DLE1BQU0sZ0NBQWdDO0FBQ3RDLE1BQU0sOEJBQThCO0FBQ3BDLE1BQU0sZ0NBQWdDO0FBQ3RDLE1BQU0sNkJBQTZCO0FBQ25DO0FBQ0E7QUFDQSxNQUFNLCtCQUErQjtBQUNyQyxNQUFNLDZCQUE2QjtBQUNuQyxNQUFNLGdDQUFnQztBQUN0QyxNQUFNLDhCQUE4QjtBQUNwQyxNQUFNLGdDQUFnQztBQUN0QyxNQUFNLDZCQUE2QjtBQUNuQyxNQUFNLGtDQUFrQztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsWUFBWSxrQ0FBa0M7QUFDOUM7QUFDQSxjQUFjLHlEQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsdURBQXVELHNCQUFzQjtBQUM3RTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsYUFBYTtBQUNsRTtBQUNBO0FBQ0EsUUFBUSx3RUFBSztBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCx5REFBUyxPQUFPO0FBQ25FO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3RoaXJkd2ViL2Rpc3QvZXNtL3RyYW5zYWN0aW9uL2FjdGlvbnMvZ2FzbGVzcy9wcm92aWRlcnMvb3BlbnplcHBlbGluLmpzPzY5OWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q29udHJhY3QgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29udHJhY3QvY29udHJhY3QuanNcIjtcbmltcG9ydCB7IGlzSGV4IH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL2VuY29kaW5nL2hlbHBlcnMvaXMtaGV4LmpzXCI7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tIFwiLi4vLi4vLi4vLi4vdXRpbHMvanNvbi5qc1wiO1xuaW1wb3J0IHsgcmVhZENvbnRyYWN0IH0gZnJvbSBcIi4uLy4uLy4uL3JlYWQtY29udHJhY3QuanNcIjtcbi8qKlxuICogQGludGVybmFsIC0gb25seSBleHBvcnRlZCBmb3IgdGVzdGluZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlcGFyZU9wZW5aZXBwZWxpblRyYW5zYWN0aW9uKHsgYWNjb3VudCwgc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24sIHRyYW5zYWN0aW9uLCBnYXNsZXNzLCB9KSB7XG4gICAgY29uc3QgZm9ycndhZGVyQ29udHJhY3QgPSBnZXRDb250cmFjdCh7XG4gICAgICAgIGFkZHJlc3M6IGdhc2xlc3MucmVsYXllckZvcndhcmRlckFkZHJlc3MsXG4gICAgICAgIGNoYWluOiB0cmFuc2FjdGlvbi5jaGFpbixcbiAgICAgICAgY2xpZW50OiB0cmFuc2FjdGlvbi5jbGllbnQsXG4gICAgfSk7XG4gICAgY29uc3Qgbm9uY2UgPSBhd2FpdCByZWFkQ29udHJhY3Qoe1xuICAgICAgICBjb250cmFjdDogZm9ycndhZGVyQ29udHJhY3QsXG4gICAgICAgIG1ldGhvZDogXCJmdW5jdGlvbiBnZXROb25jZShhZGRyZXNzKSB2aWV3IHJldHVybnMgKHVpbnQyNTYpXCIsXG4gICAgICAgIHBhcmFtczogW2FjY291bnQuYWRkcmVzc10sXG4gICAgfSk7XG4gICAgY29uc3QgW3NpZ25hdHVyZSwgbWVzc2FnZV0gPSBhd2FpdCAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAvLyBUT0RPOiBoYW5kbGUgc3BlY2lhbCBjYXNlIGZvciBgYXBwcm92ZWAgLT4gYHBlcm1pdGAgdHJhbnNhY3Rpb25zXG4gICAgICAgIGlmICghc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24udG8pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wZW5aZXBwZWxpbiB0cmFuc2FjdGlvbnMgbXVzdCBoYXZlIGEgJ3RvJyBhZGRyZXNzXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24uZ2FzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcGVuWmVwcGVsaW4gdHJhbnNhY3Rpb25zIG11c3QgaGF2ZSBhICdnYXMnIHZhbHVlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2VyaWFsaXphYmxlVHJhbnNhY3Rpb24uZGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT3BlblplcHBlbGluIHRyYW5zYWN0aW9ucyBtdXN0IGhhdmUgYSAnZGF0YScgdmFsdWVcIik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2hhaW5sZXNzIHN1cHBvcnQhXG4gICAgICAgIGlmIChnYXNsZXNzLmV4cGVyaW1lbnRhbENoYWlubGVzc1N1cHBvcnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgY2hhaW5pZDogQmlnSW50KHRyYW5zYWN0aW9uLmNoYWluLmlkKSxcbiAgICAgICAgICAgICAgICBkYXRhOiBzZXJpYWxpemFibGVUcmFuc2FjdGlvbi5kYXRhLFxuICAgICAgICAgICAgICAgIGZyb206IGFjY291bnQuYWRkcmVzcyxcbiAgICAgICAgICAgICAgICBnYXM6IHNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLmdhcyxcbiAgICAgICAgICAgICAgICBub25jZTogbm9uY2UsXG4gICAgICAgICAgICAgICAgdG86IHNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLnRvLFxuICAgICAgICAgICAgICAgIHZhbHVlOiAwbixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGF3YWl0IGFjY291bnQuc2lnblR5cGVkRGF0YSh7XG4gICAgICAgICAgICAgICAgICAgIGRvbWFpbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJHU052MiBGb3J3YXJkZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcmlmeWluZ0NvbnRyYWN0OiBmb3Jyd2FkZXJDb250cmFjdC5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbjogXCIwLjAuMVwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBwcmltYXJ5VHlwZTogXCJGb3J3YXJkUmVxdWVzdFwiLFxuICAgICAgICAgICAgICAgICAgICB0eXBlczogeyBGb3J3YXJkUmVxdWVzdDogQ2hhaW5Bd2FyZUZvcndhcmRSZXF1ZXN0IH0sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gZWxzZSBub24tY2hhaW5sZXNzIHN1cHBvcnRcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IHNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLmRhdGEsXG4gICAgICAgICAgICBmcm9tOiBhY2NvdW50LmFkZHJlc3MsXG4gICAgICAgICAgICBnYXM6IHNlcmlhbGl6YWJsZVRyYW5zYWN0aW9uLmdhcyxcbiAgICAgICAgICAgIG5vbmNlOiBub25jZSxcbiAgICAgICAgICAgIHRvOiBzZXJpYWxpemFibGVUcmFuc2FjdGlvbi50byxcbiAgICAgICAgICAgIHZhbHVlOiAwbixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIGF3YWl0IGFjY291bnQuc2lnblR5cGVkRGF0YSh7XG4gICAgICAgICAgICAgICAgZG9tYWluOiB7XG4gICAgICAgICAgICAgICAgICAgIGNoYWluSWQ6IHRyYW5zYWN0aW9uLmNoYWluLmlkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnYXNsZXNzLmRvbWFpbk5hbWUgPz8gXCJHU052MiBGb3J3YXJkZXJcIixcbiAgICAgICAgICAgICAgICAgICAgdmVyaWZ5aW5nQ29udHJhY3Q6IGZvcnJ3YWRlckNvbnRyYWN0LmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246IGdhc2xlc3MuZG9tYWluVmVyc2lvbiA/PyBcIjAuMC4xXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIHByaW1hcnlUeXBlOiBcIkZvcndhcmRSZXF1ZXN0XCIsXG4gICAgICAgICAgICAgICAgdHlwZXM6IHsgRm9yd2FyZFJlcXVlc3QgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgXTtcbiAgICB9KSgpO1xuICAgIC8vIFRPRE86IGhhbmRsZSBzcGVjaWFsIGNhc2UgZm9yIGBhcHByb3ZlYCAtPiBgcGVybWl0YFxuICAgIGNvbnN0IG1lc3NhZ2VUeXBlID0gXCJmb3J3YXJkXCI7XG4gICAgcmV0dXJuIHsgbWVzc2FnZSwgbWVzc2FnZVR5cGUsIHNpZ25hdHVyZSB9O1xufVxuY29uc3QgRm9yd2FyZFJlcXVlc3QgPSBbXG4gICAgeyBuYW1lOiBcImZyb21cIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICB7IG5hbWU6IFwidG9cIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICB7IG5hbWU6IFwidmFsdWVcIiwgdHlwZTogXCJ1aW50MjU2XCIgfSxcbiAgICB7IG5hbWU6IFwiZ2FzXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgeyBuYW1lOiBcIm5vbmNlXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgeyBuYW1lOiBcImRhdGFcIiwgdHlwZTogXCJieXRlc1wiIH0sXG5dO1xuY29uc3QgQ2hhaW5Bd2FyZUZvcndhcmRSZXF1ZXN0ID0gW1xuICAgIHsgbmFtZTogXCJmcm9tXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH0sXG4gICAgeyBuYW1lOiBcInRvXCIsIHR5cGU6IFwiYWRkcmVzc1wiIH0sXG4gICAgeyBuYW1lOiBcInZhbHVlXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG4gICAgeyBuYW1lOiBcImdhc1wiLCB0eXBlOiBcInVpbnQyNTZcIiB9LFxuICAgIHsgbmFtZTogXCJub25jZVwiLCB0eXBlOiBcInVpbnQyNTZcIiB9LFxuICAgIHsgbmFtZTogXCJkYXRhXCIsIHR5cGU6IFwiYnl0ZXNcIiB9LFxuICAgIHsgbmFtZTogXCJjaGFpbmlkXCIsIHR5cGU6IFwidWludDI1NlwiIH0sXG5dO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlbGF5T3BlblplcHBlbGluVHJhbnNhY3Rpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IHsgbWVzc2FnZSwgbWVzc2FnZVR5cGUsIHNpZ25hdHVyZSB9ID0gYXdhaXQgcHJlcGFyZU9wZW5aZXBwZWxpblRyYW5zYWN0aW9uKG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gob3B0aW9ucy5nYXNsZXNzLnJlbGF5ZXJVcmwsIHtcbiAgICAgICAgYm9keTogc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIGZvcndhcmRlckFkZHJlc3M6IG9wdGlvbnMuZ2FzbGVzcy5yZWxheWVyRm9yd2FyZGVyQWRkcmVzcyxcbiAgICAgICAgICAgIHJlcXVlc3Q6IG1lc3NhZ2UsXG4gICAgICAgICAgICBzaWduYXR1cmUsXG4gICAgICAgICAgICB0eXBlOiBtZXNzYWdlVHlwZSxcbiAgICAgICAgfSksXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgfSk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzZW5kIHRyYW5zYWN0aW9uOiAke2F3YWl0IHJlc3BvbnNlLnRleHQoKX1gKTtcbiAgICB9XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICBpZiAoIWpzb24ucmVzdWx0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVsYXkgdHJhbnNhY3Rpb24gZmFpbGVkOiAke2pzb24ubWVzc2FnZX1gKTtcbiAgICB9XG4gICAgY29uc3QgdHJhbnNhY3Rpb25IYXNoID0gSlNPTi5wYXJzZShqc29uLnJlc3VsdCkudHhIYXNoO1xuICAgIGlmIChpc0hleCh0cmFuc2FjdGlvbkhhc2gpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGFpbjogb3B0aW9ucy50cmFuc2FjdGlvbi5jaGFpbixcbiAgICAgICAgICAgIGNsaWVudDogb3B0aW9ucy50cmFuc2FjdGlvbi5jbGllbnQsXG4gICAgICAgICAgICB0cmFuc2FjdGlvbkhhc2gsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHNlbmQgdHJhbnNhY3Rpb246ICR7c3RyaW5naWZ5KGpzb24pfWApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlbnplcHBlbGluLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/gasless/providers/openzeppelin.js\n"));

/***/ })

}]);