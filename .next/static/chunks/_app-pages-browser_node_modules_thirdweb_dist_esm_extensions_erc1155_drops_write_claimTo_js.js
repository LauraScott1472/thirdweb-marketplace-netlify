"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc1155_drops_write_claimTo_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/read/getActiveClaimConditionId.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/read/getActiveClaimConditionId.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FN_SELECTOR: function() { return /* binding */ FN_SELECTOR; },\n/* harmony export */   decodeGetActiveClaimConditionIdResult: function() { return /* binding */ decodeGetActiveClaimConditionIdResult; },\n/* harmony export */   encodeGetActiveClaimConditionId: function() { return /* binding */ encodeGetActiveClaimConditionId; },\n/* harmony export */   encodeGetActiveClaimConditionIdParams: function() { return /* binding */ encodeGetActiveClaimConditionIdParams; },\n/* harmony export */   getActiveClaimConditionId: function() { return /* binding */ getActiveClaimConditionId; },\n/* harmony export */   isGetActiveClaimConditionIdSupported: function() { return /* binding */ isGetActiveClaimConditionIdSupported; }\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/abi/decodeAbiParameters.js\");\n/* harmony import */ var _transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../transaction/read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n/* harmony import */ var _utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../utils/abi/encodeAbiParameters.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/abi/encodeAbiParameters.js\");\n/* harmony import */ var _utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../utils/bytecode/detectExtension.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/detectExtension.js\");\n\n\n\n\nconst FN_SELECTOR = \"0x5ab063e8\";\nconst FN_INPUTS = [\n    {\n        name: \"_tokenId\",\n        type: \"uint256\",\n    },\n];\nconst FN_OUTPUTS = [\n    {\n        type: \"uint256\",\n    },\n];\n/**\n * Checks if the `getActiveClaimConditionId` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `getActiveClaimConditionId` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isGetActiveClaimConditionIdSupported } from \"thirdweb/extensions/erc1155\";\n * const supported = isGetActiveClaimConditionIdSupported([\"0x...\"]);\n * ```\n */\nfunction isGetActiveClaimConditionIdSupported(availableSelectors) {\n    return (0,_utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__.detectMethod)({\n        availableSelectors,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n    });\n}\n/**\n * Encodes the parameters for the \"getActiveClaimConditionId\" function.\n * @param options - The options for the getActiveClaimConditionId function.\n * @returns The encoded ABI parameters.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeGetActiveClaimConditionIdParams } from \"thirdweb/extensions/erc1155\";\n * const result = encodeGetActiveClaimConditionIdParams({\n *  tokenId: ...,\n * });\n * ```\n */\nfunction encodeGetActiveClaimConditionIdParams(options) {\n    return (0,_utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__.encodeAbiParameters)(FN_INPUTS, [options.tokenId]);\n}\n/**\n * Encodes the \"getActiveClaimConditionId\" function into a Hex string with its parameters.\n * @param options - The options for the getActiveClaimConditionId function.\n * @returns The encoded hexadecimal string.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeGetActiveClaimConditionId } from \"thirdweb/extensions/erc1155\";\n * const result = encodeGetActiveClaimConditionId({\n *  tokenId: ...,\n * });\n * ```\n */\nfunction encodeGetActiveClaimConditionId(options) {\n    // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n    // we can do this because we know the specific formats of the values\n    return (FN_SELECTOR +\n        encodeGetActiveClaimConditionIdParams(options).slice(2));\n}\n/**\n * Decodes the result of the getActiveClaimConditionId function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC1155\n * @example\n * ```ts\n * import { decodeGetActiveClaimConditionIdResult } from \"thirdweb/extensions/erc1155\";\n * const result = decodeGetActiveClaimConditionIdResultResult(\"...\");\n * ```\n */\nfunction decodeGetActiveClaimConditionIdResult(result) {\n    return (0,viem__WEBPACK_IMPORTED_MODULE_2__.decodeAbiParameters)(FN_OUTPUTS, result)[0];\n}\n/**\n * Calls the \"getActiveClaimConditionId\" function on the contract.\n * @param options - The options for the getActiveClaimConditionId function.\n * @returns The parsed result of the function call.\n * @extension ERC1155\n * @example\n * ```ts\n * import { getActiveClaimConditionId } from \"thirdweb/extensions/erc1155\";\n *\n * const result = await getActiveClaimConditionId({\n *  contract,\n *  tokenId: ...,\n * });\n *\n * ```\n */\nasync function getActiveClaimConditionId(options) {\n    return (0,_transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__.readContract)({\n        contract: options.contract,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n        params: [options.tokenId],\n    });\n}\n//# sourceMappingURL=getActiveClaimConditionId.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9leHRlbnNpb25zL2VyYzExNTUvX19nZW5lcmF0ZWRfXy9JRHJvcDExNTUvcmVhZC9nZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDZ0M7QUFDVztBQUNOO0FBQ3pFO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksdUNBQXVDO0FBQ25EO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyxnRkFBWTtBQUN2QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdDQUF3QztBQUNwRDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDTztBQUNQLFdBQVcsc0ZBQW1CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtDQUFrQztBQUM5QztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksd0NBQXdDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyx5REFBbUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVywyRUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vZXh0ZW5zaW9ucy9lcmMxMTU1L19fZ2VuZXJhdGVkX18vSURyb3AxMTU1L3JlYWQvZ2V0QWN0aXZlQ2xhaW1Db25kaXRpb25JZC5qcz84MGM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlY29kZUFiaVBhcmFtZXRlcnMgfSBmcm9tIFwidmllbVwiO1xuaW1wb3J0IHsgcmVhZENvbnRyYWN0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3RyYW5zYWN0aW9uL3JlYWQtY29udHJhY3QuanNcIjtcbmltcG9ydCB7IGVuY29kZUFiaVBhcmFtZXRlcnMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vdXRpbHMvYWJpL2VuY29kZUFiaVBhcmFtZXRlcnMuanNcIjtcbmltcG9ydCB7IGRldGVjdE1ldGhvZCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi91dGlscy9ieXRlY29kZS9kZXRlY3RFeHRlbnNpb24uanNcIjtcbmV4cG9ydCBjb25zdCBGTl9TRUxFQ1RPUiA9IFwiMHg1YWIwNjNlOFwiO1xuY29uc3QgRk5fSU5QVVRTID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogXCJfdG9rZW5JZFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICB9LFxuXTtcbmNvbnN0IEZOX09VVFBVVFMgPSBbXG4gICAge1xuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICB9LFxuXTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBgZ2V0QWN0aXZlQ2xhaW1Db25kaXRpb25JZGAgbWV0aG9kIGlzIHN1cHBvcnRlZCBieSB0aGUgZ2l2ZW4gY29udHJhY3QuXG4gKiBAcGFyYW0gYXZhaWxhYmxlU2VsZWN0b3JzIEFuIGFycmF5IG9mIDRieXRlIGZ1bmN0aW9uIHNlbGVjdG9ycyBvZiB0aGUgY29udHJhY3QuIFlvdSBjYW4gZ2V0IHRoaXMgaW4gdmFyaW91cyB3YXlzLCBzdWNoIGFzIHVzaW5nIFwid2hhdHNhYmlcIiBvciBpZiB5b3UgaGF2ZSB0aGUgQUJJIG9mIHRoZSBjb250cmFjdCBhdmFpbGFibGUgeW91IGNhbiB1c2UgaXQgdG8gZ2VuZXJhdGUgdGhlIHNlbGVjdG9ycy5cbiAqIEByZXR1cm5zIEEgYm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBgZ2V0QWN0aXZlQ2xhaW1Db25kaXRpb25JZGAgbWV0aG9kIGlzIHN1cHBvcnRlZC5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBpc0dldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWRTdXBwb3J0ZWQgfSBmcm9tIFwidGhpcmR3ZWIvZXh0ZW5zaW9ucy9lcmMxMTU1XCI7XG4gKiBjb25zdCBzdXBwb3J0ZWQgPSBpc0dldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWRTdXBwb3J0ZWQoW1wiMHguLi5cIl0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0dldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWRTdXBwb3J0ZWQoYXZhaWxhYmxlU2VsZWN0b3JzKSB7XG4gICAgcmV0dXJuIGRldGVjdE1ldGhvZCh7XG4gICAgICAgIGF2YWlsYWJsZVNlbGVjdG9ycyxcbiAgICAgICAgbWV0aG9kOiBbRk5fU0VMRUNUT1IsIEZOX0lOUFVUUywgRk5fT1VUUFVUU10sXG4gICAgfSk7XG59XG4vKipcbiAqIEVuY29kZXMgdGhlIHBhcmFtZXRlcnMgZm9yIHRoZSBcImdldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWRcIiBmdW5jdGlvbi5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBnZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkIGZ1bmN0aW9uLlxuICogQHJldHVybnMgVGhlIGVuY29kZWQgQUJJIHBhcmFtZXRlcnMuXG4gKiBAZXh0ZW5zaW9uIEVSQzExNTVcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZW5jb2RlR2V0QWN0aXZlQ2xhaW1Db25kaXRpb25JZFBhcmFtcyB9IGZyb20gXCJ0aGlyZHdlYi9leHRlbnNpb25zL2VyYzExNTVcIjtcbiAqIGNvbnN0IHJlc3VsdCA9IGVuY29kZUdldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWRQYXJhbXMoe1xuICogIHRva2VuSWQ6IC4uLixcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVHZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkUGFyYW1zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZW5jb2RlQWJpUGFyYW1ldGVycyhGTl9JTlBVVFMsIFtvcHRpb25zLnRva2VuSWRdKTtcbn1cbi8qKlxuICogRW5jb2RlcyB0aGUgXCJnZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkXCIgZnVuY3Rpb24gaW50byBhIEhleCBzdHJpbmcgd2l0aCBpdHMgcGFyYW1ldGVycy5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBnZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkIGZ1bmN0aW9uLlxuICogQHJldHVybnMgVGhlIGVuY29kZWQgaGV4YWRlY2ltYWwgc3RyaW5nLlxuICogQGV4dGVuc2lvbiBFUkMxMTU1XG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGVuY29kZUdldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWQgfSBmcm9tIFwidGhpcmR3ZWIvZXh0ZW5zaW9ucy9lcmMxMTU1XCI7XG4gKiBjb25zdCByZXN1bHQgPSBlbmNvZGVHZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkKHtcbiAqICB0b2tlbklkOiAuLi4sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlR2V0QWN0aXZlQ2xhaW1Db25kaXRpb25JZChvcHRpb25zKSB7XG4gICAgLy8gd2UgZG8gYSBcIm1hbnVhbFwiIGNvbmNhdCBoZXJlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZCBvZiB0aGUgXCJjb25jYXRIZXhcIiBmdW5jdGlvblxuICAgIC8vIHdlIGNhbiBkbyB0aGlzIGJlY2F1c2Ugd2Uga25vdyB0aGUgc3BlY2lmaWMgZm9ybWF0cyBvZiB0aGUgdmFsdWVzXG4gICAgcmV0dXJuIChGTl9TRUxFQ1RPUiArXG4gICAgICAgIGVuY29kZUdldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWRQYXJhbXMob3B0aW9ucykuc2xpY2UoMikpO1xufVxuLyoqXG4gKiBEZWNvZGVzIHRoZSByZXN1bHQgb2YgdGhlIGdldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWQgZnVuY3Rpb24gY2FsbC5cbiAqIEBwYXJhbSByZXN1bHQgLSBUaGUgaGV4YWRlY2ltYWwgcmVzdWx0IHRvIGRlY29kZS5cbiAqIEByZXR1cm5zIFRoZSBkZWNvZGVkIHJlc3VsdCBhcyBwZXIgdGhlIEZOX09VVFBVVFMgZGVmaW5pdGlvbi5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBkZWNvZGVHZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkUmVzdWx0IH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICogY29uc3QgcmVzdWx0ID0gZGVjb2RlR2V0QWN0aXZlQ2xhaW1Db25kaXRpb25JZFJlc3VsdFJlc3VsdChcIi4uLlwiKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlR2V0QWN0aXZlQ2xhaW1Db25kaXRpb25JZFJlc3VsdChyZXN1bHQpIHtcbiAgICByZXR1cm4gZGVjb2RlQWJpUGFyYW1ldGVycyhGTl9PVVRQVVRTLCByZXN1bHQpWzBdO1xufVxuLyoqXG4gKiBDYWxscyB0aGUgXCJnZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkXCIgZnVuY3Rpb24gb24gdGhlIGNvbnRyYWN0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGdldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWQgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyBUaGUgcGFyc2VkIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24gY2FsbC5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBnZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICpcbiAqIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWQoe1xuICogIGNvbnRyYWN0LFxuICogIHRva2VuSWQ6IC4uLixcbiAqIH0pO1xuICpcbiAqIGBgYFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZlQ2xhaW1Db25kaXRpb25JZChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHJlYWRDb250cmFjdCh7XG4gICAgICAgIGNvbnRyYWN0OiBvcHRpb25zLmNvbnRyYWN0LFxuICAgICAgICBtZXRob2Q6IFtGTl9TRUxFQ1RPUiwgRk5fSU5QVVRTLCBGTl9PVVRQVVRTXSxcbiAgICAgICAgcGFyYW1zOiBbb3B0aW9ucy50b2tlbklkXSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/read/getActiveClaimConditionId.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/read/getClaimConditionById.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/read/getClaimConditionById.js ***!
  \*****************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FN_SELECTOR: function() { return /* binding */ FN_SELECTOR; },\n/* harmony export */   decodeGetClaimConditionByIdResult: function() { return /* binding */ decodeGetClaimConditionByIdResult; },\n/* harmony export */   encodeGetClaimConditionById: function() { return /* binding */ encodeGetClaimConditionById; },\n/* harmony export */   encodeGetClaimConditionByIdParams: function() { return /* binding */ encodeGetClaimConditionByIdParams; },\n/* harmony export */   getClaimConditionById: function() { return /* binding */ getClaimConditionById; },\n/* harmony export */   isGetClaimConditionByIdSupported: function() { return /* binding */ isGetClaimConditionByIdSupported; }\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/abi/decodeAbiParameters.js\");\n/* harmony import */ var _transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../transaction/read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n/* harmony import */ var _utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../utils/abi/encodeAbiParameters.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/abi/encodeAbiParameters.js\");\n/* harmony import */ var _utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../utils/bytecode/detectExtension.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/detectExtension.js\");\n\n\n\n\nconst FN_SELECTOR = \"0xd45b28d7\";\nconst FN_INPUTS = [\n    {\n        name: \"_tokenId\",\n        type: \"uint256\",\n    },\n    {\n        name: \"_conditionId\",\n        type: \"uint256\",\n    },\n];\nconst FN_OUTPUTS = [\n    {\n        components: [\n            {\n                name: \"startTimestamp\",\n                type: \"uint256\",\n            },\n            {\n                name: \"maxClaimableSupply\",\n                type: \"uint256\",\n            },\n            {\n                name: \"supplyClaimed\",\n                type: \"uint256\",\n            },\n            {\n                name: \"quantityLimitPerWallet\",\n                type: \"uint256\",\n            },\n            {\n                name: \"merkleRoot\",\n                type: \"bytes32\",\n            },\n            {\n                name: \"pricePerToken\",\n                type: \"uint256\",\n            },\n            {\n                name: \"currency\",\n                type: \"address\",\n            },\n            {\n                name: \"metadata\",\n                type: \"string\",\n            },\n        ],\n        name: \"condition\",\n        type: \"tuple\",\n    },\n];\n/**\n * Checks if the `getClaimConditionById` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `getClaimConditionById` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isGetClaimConditionByIdSupported } from \"thirdweb/extensions/erc1155\";\n * const supported = isGetClaimConditionByIdSupported([\"0x...\"]);\n * ```\n */\nfunction isGetClaimConditionByIdSupported(availableSelectors) {\n    return (0,_utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__.detectMethod)({\n        availableSelectors,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n    });\n}\n/**\n * Encodes the parameters for the \"getClaimConditionById\" function.\n * @param options - The options for the getClaimConditionById function.\n * @returns The encoded ABI parameters.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeGetClaimConditionByIdParams } from \"thirdweb/extensions/erc1155\";\n * const result = encodeGetClaimConditionByIdParams({\n *  tokenId: ...,\n *  conditionId: ...,\n * });\n * ```\n */\nfunction encodeGetClaimConditionByIdParams(options) {\n    return (0,_utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__.encodeAbiParameters)(FN_INPUTS, [options.tokenId, options.conditionId]);\n}\n/**\n * Encodes the \"getClaimConditionById\" function into a Hex string with its parameters.\n * @param options - The options for the getClaimConditionById function.\n * @returns The encoded hexadecimal string.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeGetClaimConditionById } from \"thirdweb/extensions/erc1155\";\n * const result = encodeGetClaimConditionById({\n *  tokenId: ...,\n *  conditionId: ...,\n * });\n * ```\n */\nfunction encodeGetClaimConditionById(options) {\n    // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n    // we can do this because we know the specific formats of the values\n    return (FN_SELECTOR +\n        encodeGetClaimConditionByIdParams(options).slice(2));\n}\n/**\n * Decodes the result of the getClaimConditionById function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC1155\n * @example\n * ```ts\n * import { decodeGetClaimConditionByIdResult } from \"thirdweb/extensions/erc1155\";\n * const result = decodeGetClaimConditionByIdResultResult(\"...\");\n * ```\n */\nfunction decodeGetClaimConditionByIdResult(result) {\n    return (0,viem__WEBPACK_IMPORTED_MODULE_2__.decodeAbiParameters)(FN_OUTPUTS, result)[0];\n}\n/**\n * Calls the \"getClaimConditionById\" function on the contract.\n * @param options - The options for the getClaimConditionById function.\n * @returns The parsed result of the function call.\n * @extension ERC1155\n * @example\n * ```ts\n * import { getClaimConditionById } from \"thirdweb/extensions/erc1155\";\n *\n * const result = await getClaimConditionById({\n *  contract,\n *  tokenId: ...,\n *  conditionId: ...,\n * });\n *\n * ```\n */\nasync function getClaimConditionById(options) {\n    return (0,_transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__.readContract)({\n        contract: options.contract,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n        params: [options.tokenId, options.conditionId],\n    });\n}\n//# sourceMappingURL=getClaimConditionById.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/read/getClaimConditionById.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/write/claim.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/write/claim.js ***!
  \**************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FN_SELECTOR: function() { return /* binding */ FN_SELECTOR; },\n/* harmony export */   claim: function() { return /* binding */ claim; },\n/* harmony export */   encodeClaim: function() { return /* binding */ encodeClaim; },\n/* harmony export */   encodeClaimParams: function() { return /* binding */ encodeClaimParams; },\n/* harmony export */   isClaimSupported: function() { return /* binding */ isClaimSupported; }\n/* harmony export */ });\n/* harmony import */ var _transaction_prepare_contract_call_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../transaction/prepare-contract-call.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/prepare-contract-call.js\");\n/* harmony import */ var _utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../utils/abi/encodeAbiParameters.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/abi/encodeAbiParameters.js\");\n/* harmony import */ var _utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../utils/bytecode/detectExtension.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/detectExtension.js\");\n/* harmony import */ var _utils_promise_once_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../utils/promise/once.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/promise/once.js\");\n\n\n\n\nconst FN_SELECTOR = \"0x57bc3d78\";\nconst FN_INPUTS = [\n    {\n        name: \"receiver\",\n        type: \"address\",\n    },\n    {\n        name: \"tokenId\",\n        type: \"uint256\",\n    },\n    {\n        name: \"quantity\",\n        type: \"uint256\",\n    },\n    {\n        name: \"currency\",\n        type: \"address\",\n    },\n    {\n        name: \"pricePerToken\",\n        type: \"uint256\",\n    },\n    {\n        components: [\n            {\n                name: \"proof\",\n                type: \"bytes32[]\",\n            },\n            {\n                name: \"quantityLimitPerWallet\",\n                type: \"uint256\",\n            },\n            {\n                name: \"pricePerToken\",\n                type: \"uint256\",\n            },\n            {\n                name: \"currency\",\n                type: \"address\",\n            },\n        ],\n        name: \"allowlistProof\",\n        type: \"tuple\",\n    },\n    {\n        name: \"data\",\n        type: \"bytes\",\n    },\n];\nconst FN_OUTPUTS = [];\n/**\n * Checks if the `claim` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `claim` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isClaimSupported } from \"thirdweb/extensions/erc1155\";\n *\n * const supported = isClaimSupported([\"0x...\"]);\n * ```\n */\nfunction isClaimSupported(availableSelectors) {\n    return (0,_utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__.detectMethod)({\n        availableSelectors,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n    });\n}\n/**\n * Encodes the parameters for the \"claim\" function.\n * @param options - The options for the claim function.\n * @returns The encoded ABI parameters.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeClaimParams } from \"thirdweb/extensions/erc1155\";\n * const result = encodeClaimParams({\n *  receiver: ...,\n *  tokenId: ...,\n *  quantity: ...,\n *  currency: ...,\n *  pricePerToken: ...,\n *  allowlistProof: ...,\n *  data: ...,\n * });\n * ```\n */\nfunction encodeClaimParams(options) {\n    return (0,_utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__.encodeAbiParameters)(FN_INPUTS, [\n        options.receiver,\n        options.tokenId,\n        options.quantity,\n        options.currency,\n        options.pricePerToken,\n        options.allowlistProof,\n        options.data,\n    ]);\n}\n/**\n * Encodes the \"claim\" function into a Hex string with its parameters.\n * @param options - The options for the claim function.\n * @returns The encoded hexadecimal string.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeClaim } from \"thirdweb/extensions/erc1155\";\n * const result = encodeClaim({\n *  receiver: ...,\n *  tokenId: ...,\n *  quantity: ...,\n *  currency: ...,\n *  pricePerToken: ...,\n *  allowlistProof: ...,\n *  data: ...,\n * });\n * ```\n */\nfunction encodeClaim(options) {\n    // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n    // we can do this because we know the specific formats of the values\n    return (FN_SELECTOR +\n        encodeClaimParams(options).slice(2));\n}\n/**\n * Prepares a transaction to call the \"claim\" function on the contract.\n * @param options - The options for the \"claim\" function.\n * @returns A prepared transaction object.\n * @extension ERC1155\n * @example\n * ```ts\n * import { sendTransaction } from \"thirdweb\";\n * import { claim } from \"thirdweb/extensions/erc1155\";\n *\n * const transaction = claim({\n *  contract,\n *  receiver: ...,\n *  tokenId: ...,\n *  quantity: ...,\n *  currency: ...,\n *  pricePerToken: ...,\n *  allowlistProof: ...,\n *  data: ...,\n *  overrides: {\n *    ...\n *  }\n * });\n *\n * // Send the transaction\n * await sendTransaction({ transaction, account });\n * ```\n */\nfunction claim(options) {\n    const asyncOptions = (0,_utils_promise_once_js__WEBPACK_IMPORTED_MODULE_2__.once)(async () => {\n        return \"asyncParams\" in options ? await options.asyncParams() : options;\n    });\n    return (0,_transaction_prepare_contract_call_js__WEBPACK_IMPORTED_MODULE_3__.prepareContractCall)({\n        accessList: async () => (await asyncOptions()).overrides?.accessList,\n        authorizationList: async () => (await asyncOptions()).overrides?.authorizationList,\n        contract: options.contract,\n        erc20Value: async () => (await asyncOptions()).overrides?.erc20Value,\n        extraGas: async () => (await asyncOptions()).overrides?.extraGas,\n        gas: async () => (await asyncOptions()).overrides?.gas,\n        gasPrice: async () => (await asyncOptions()).overrides?.gasPrice,\n        maxFeePerGas: async () => (await asyncOptions()).overrides?.maxFeePerGas,\n        maxPriorityFeePerGas: async () => (await asyncOptions()).overrides?.maxPriorityFeePerGas,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n        nonce: async () => (await asyncOptions()).overrides?.nonce,\n        params: async () => {\n            const resolvedOptions = await asyncOptions();\n            return [\n                resolvedOptions.receiver,\n                resolvedOptions.tokenId,\n                resolvedOptions.quantity,\n                resolvedOptions.currency,\n                resolvedOptions.pricePerToken,\n                resolvedOptions.allowlistProof,\n                resolvedOptions.data,\n            ];\n        },\n        value: async () => (await asyncOptions()).overrides?.value,\n    });\n}\n//# sourceMappingURL=claim.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/write/claim.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDropSinglePhase1155/read/claimCondition.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDropSinglePhase1155/read/claimCondition.js ***!
  \*********************************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FN_SELECTOR: function() { return /* binding */ FN_SELECTOR; },\n/* harmony export */   claimCondition: function() { return /* binding */ claimCondition; },\n/* harmony export */   decodeClaimConditionResult: function() { return /* binding */ decodeClaimConditionResult; },\n/* harmony export */   encodeClaimCondition: function() { return /* binding */ encodeClaimCondition; },\n/* harmony export */   encodeClaimConditionParams: function() { return /* binding */ encodeClaimConditionParams; },\n/* harmony export */   isClaimConditionSupported: function() { return /* binding */ isClaimConditionSupported; }\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/abi/decodeAbiParameters.js\");\n/* harmony import */ var _transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../transaction/read-contract.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/read-contract.js\");\n/* harmony import */ var _utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../utils/abi/encodeAbiParameters.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/abi/encodeAbiParameters.js\");\n/* harmony import */ var _utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../../utils/bytecode/detectExtension.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/bytecode/detectExtension.js\");\n\n\n\n\nconst FN_SELECTOR = \"0xe9703d25\";\nconst FN_INPUTS = [\n    {\n        name: \"tokenId\",\n        type: \"uint256\",\n    },\n];\nconst FN_OUTPUTS = [\n    {\n        name: \"startTimestamp\",\n        type: \"uint256\",\n    },\n    {\n        name: \"maxClaimableSupply\",\n        type: \"uint256\",\n    },\n    {\n        name: \"supplyClaimed\",\n        type: \"uint256\",\n    },\n    {\n        name: \"quantityLimitPerWallet\",\n        type: \"uint256\",\n    },\n    {\n        name: \"merkleRoot\",\n        type: \"bytes32\",\n    },\n    {\n        name: \"pricePerToken\",\n        type: \"uint256\",\n    },\n    {\n        name: \"currency\",\n        type: \"address\",\n    },\n    {\n        name: \"metadata\",\n        type: \"string\",\n    },\n];\n/**\n * Checks if the `claimCondition` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `claimCondition` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isClaimConditionSupported } from \"thirdweb/extensions/erc1155\";\n * const supported = isClaimConditionSupported([\"0x...\"]);\n * ```\n */\nfunction isClaimConditionSupported(availableSelectors) {\n    return (0,_utils_bytecode_detectExtension_js__WEBPACK_IMPORTED_MODULE_0__.detectMethod)({\n        availableSelectors,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n    });\n}\n/**\n * Encodes the parameters for the \"claimCondition\" function.\n * @param options - The options for the claimCondition function.\n * @returns The encoded ABI parameters.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeClaimConditionParams } from \"thirdweb/extensions/erc1155\";\n * const result = encodeClaimConditionParams({\n *  tokenId: ...,\n * });\n * ```\n */\nfunction encodeClaimConditionParams(options) {\n    return (0,_utils_abi_encodeAbiParameters_js__WEBPACK_IMPORTED_MODULE_1__.encodeAbiParameters)(FN_INPUTS, [options.tokenId]);\n}\n/**\n * Encodes the \"claimCondition\" function into a Hex string with its parameters.\n * @param options - The options for the claimCondition function.\n * @returns The encoded hexadecimal string.\n * @extension ERC1155\n * @example\n * ```ts\n * import { encodeClaimCondition } from \"thirdweb/extensions/erc1155\";\n * const result = encodeClaimCondition({\n *  tokenId: ...,\n * });\n * ```\n */\nfunction encodeClaimCondition(options) {\n    // we do a \"manual\" concat here to avoid the overhead of the \"concatHex\" function\n    // we can do this because we know the specific formats of the values\n    return (FN_SELECTOR +\n        encodeClaimConditionParams(options).slice(2));\n}\n/**\n * Decodes the result of the claimCondition function call.\n * @param result - The hexadecimal result to decode.\n * @returns The decoded result as per the FN_OUTPUTS definition.\n * @extension ERC1155\n * @example\n * ```ts\n * import { decodeClaimConditionResult } from \"thirdweb/extensions/erc1155\";\n * const result = decodeClaimConditionResultResult(\"...\");\n * ```\n */\nfunction decodeClaimConditionResult(result) {\n    return (0,viem__WEBPACK_IMPORTED_MODULE_2__.decodeAbiParameters)(FN_OUTPUTS, result);\n}\n/**\n * Calls the \"claimCondition\" function on the contract.\n * @param options - The options for the claimCondition function.\n * @returns The parsed result of the function call.\n * @extension ERC1155\n * @example\n * ```ts\n * import { claimCondition } from \"thirdweb/extensions/erc1155\";\n *\n * const result = await claimCondition({\n *  contract,\n *  tokenId: ...,\n * });\n *\n * ```\n */\nasync function claimCondition(options) {\n    return (0,_transaction_read_contract_js__WEBPACK_IMPORTED_MODULE_3__.readContract)({\n        contract: options.contract,\n        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],\n        params: [options.tokenId],\n    });\n}\n//# sourceMappingURL=claimCondition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9leHRlbnNpb25zL2VyYzExNTUvX19nZW5lcmF0ZWRfXy9JRHJvcFNpbmdsZVBoYXNlMTE1NS9yZWFkL2NsYWltQ29uZGl0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBMkM7QUFDZ0M7QUFDVztBQUNOO0FBQ3pFO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyxnRkFBWTtBQUN2QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLDZCQUE2QjtBQUN6QztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDTztBQUNQLFdBQVcsc0ZBQW1CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHVCQUF1QjtBQUNuQztBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNkJBQTZCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyx5REFBbUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUJBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVywyRUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vZXh0ZW5zaW9ucy9lcmMxMTU1L19fZ2VuZXJhdGVkX18vSURyb3BTaW5nbGVQaGFzZTExNTUvcmVhZC9jbGFpbUNvbmRpdGlvbi5qcz82MmE3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlY29kZUFiaVBhcmFtZXRlcnMgfSBmcm9tIFwidmllbVwiO1xuaW1wb3J0IHsgcmVhZENvbnRyYWN0IH0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3RyYW5zYWN0aW9uL3JlYWQtY29udHJhY3QuanNcIjtcbmltcG9ydCB7IGVuY29kZUFiaVBhcmFtZXRlcnMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vdXRpbHMvYWJpL2VuY29kZUFiaVBhcmFtZXRlcnMuanNcIjtcbmltcG9ydCB7IGRldGVjdE1ldGhvZCB9IGZyb20gXCIuLi8uLi8uLi8uLi8uLi91dGlscy9ieXRlY29kZS9kZXRlY3RFeHRlbnNpb24uanNcIjtcbmV4cG9ydCBjb25zdCBGTl9TRUxFQ1RPUiA9IFwiMHhlOTcwM2QyNVwiO1xuY29uc3QgRk5fSU5QVVRTID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogXCJ0b2tlbklkXCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgIH0sXG5dO1xuY29uc3QgRk5fT1VUUFVUUyA9IFtcbiAgICB7XG4gICAgICAgIG5hbWU6IFwic3RhcnRUaW1lc3RhbXBcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwibWF4Q2xhaW1hYmxlU3VwcGx5XCIsXG4gICAgICAgIHR5cGU6IFwidWludDI1NlwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcInN1cHBseUNsYWltZWRcIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwicXVhbnRpdHlMaW1pdFBlcldhbGxldFwiLFxuICAgICAgICB0eXBlOiBcInVpbnQyNTZcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJtZXJrbGVSb290XCIsXG4gICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcInByaWNlUGVyVG9rZW5cIixcbiAgICAgICAgdHlwZTogXCJ1aW50MjU2XCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiY3VycmVuY3lcIixcbiAgICAgICAgdHlwZTogXCJhZGRyZXNzXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwibWV0YWRhdGFcIixcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICB9LFxuXTtcbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBgY2xhaW1Db25kaXRpb25gIG1ldGhvZCBpcyBzdXBwb3J0ZWQgYnkgdGhlIGdpdmVuIGNvbnRyYWN0LlxuICogQHBhcmFtIGF2YWlsYWJsZVNlbGVjdG9ycyBBbiBhcnJheSBvZiA0Ynl0ZSBmdW5jdGlvbiBzZWxlY3RvcnMgb2YgdGhlIGNvbnRyYWN0LiBZb3UgY2FuIGdldCB0aGlzIGluIHZhcmlvdXMgd2F5cywgc3VjaCBhcyB1c2luZyBcIndoYXRzYWJpXCIgb3IgaWYgeW91IGhhdmUgdGhlIEFCSSBvZiB0aGUgY29udHJhY3QgYXZhaWxhYmxlIHlvdSBjYW4gdXNlIGl0IHRvIGdlbmVyYXRlIHRoZSBzZWxlY3RvcnMuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgYGNsYWltQ29uZGl0aW9uYCBtZXRob2QgaXMgc3VwcG9ydGVkLlxuICogQGV4dGVuc2lvbiBFUkMxMTU1XG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGlzQ2xhaW1Db25kaXRpb25TdXBwb3J0ZWQgfSBmcm9tIFwidGhpcmR3ZWIvZXh0ZW5zaW9ucy9lcmMxMTU1XCI7XG4gKiBjb25zdCBzdXBwb3J0ZWQgPSBpc0NsYWltQ29uZGl0aW9uU3VwcG9ydGVkKFtcIjB4Li4uXCJdKTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNDbGFpbUNvbmRpdGlvblN1cHBvcnRlZChhdmFpbGFibGVTZWxlY3RvcnMpIHtcbiAgICByZXR1cm4gZGV0ZWN0TWV0aG9kKHtcbiAgICAgICAgYXZhaWxhYmxlU2VsZWN0b3JzLFxuICAgICAgICBtZXRob2Q6IFtGTl9TRUxFQ1RPUiwgRk5fSU5QVVRTLCBGTl9PVVRQVVRTXSxcbiAgICB9KTtcbn1cbi8qKlxuICogRW5jb2RlcyB0aGUgcGFyYW1ldGVycyBmb3IgdGhlIFwiY2xhaW1Db25kaXRpb25cIiBmdW5jdGlvbi5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBjbGFpbUNvbmRpdGlvbiBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIFRoZSBlbmNvZGVkIEFCSSBwYXJhbWV0ZXJzLlxuICogQGV4dGVuc2lvbiBFUkMxMTU1XG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGVuY29kZUNsYWltQ29uZGl0aW9uUGFyYW1zIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICogY29uc3QgcmVzdWx0ID0gZW5jb2RlQ2xhaW1Db25kaXRpb25QYXJhbXMoe1xuICogIHRva2VuSWQ6IC4uLixcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVDbGFpbUNvbmRpdGlvblBhcmFtcyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIGVuY29kZUFiaVBhcmFtZXRlcnMoRk5fSU5QVVRTLCBbb3B0aW9ucy50b2tlbklkXSk7XG59XG4vKipcbiAqIEVuY29kZXMgdGhlIFwiY2xhaW1Db25kaXRpb25cIiBmdW5jdGlvbiBpbnRvIGEgSGV4IHN0cmluZyB3aXRoIGl0cyBwYXJhbWV0ZXJzLlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGNsYWltQ29uZGl0aW9uIGZ1bmN0aW9uLlxuICogQHJldHVybnMgVGhlIGVuY29kZWQgaGV4YWRlY2ltYWwgc3RyaW5nLlxuICogQGV4dGVuc2lvbiBFUkMxMTU1XG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGVuY29kZUNsYWltQ29uZGl0aW9uIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICogY29uc3QgcmVzdWx0ID0gZW5jb2RlQ2xhaW1Db25kaXRpb24oe1xuICogIHRva2VuSWQ6IC4uLixcbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVDbGFpbUNvbmRpdGlvbihvcHRpb25zKSB7XG4gICAgLy8gd2UgZG8gYSBcIm1hbnVhbFwiIGNvbmNhdCBoZXJlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZCBvZiB0aGUgXCJjb25jYXRIZXhcIiBmdW5jdGlvblxuICAgIC8vIHdlIGNhbiBkbyB0aGlzIGJlY2F1c2Ugd2Uga25vdyB0aGUgc3BlY2lmaWMgZm9ybWF0cyBvZiB0aGUgdmFsdWVzXG4gICAgcmV0dXJuIChGTl9TRUxFQ1RPUiArXG4gICAgICAgIGVuY29kZUNsYWltQ29uZGl0aW9uUGFyYW1zKG9wdGlvbnMpLnNsaWNlKDIpKTtcbn1cbi8qKlxuICogRGVjb2RlcyB0aGUgcmVzdWx0IG9mIHRoZSBjbGFpbUNvbmRpdGlvbiBmdW5jdGlvbiBjYWxsLlxuICogQHBhcmFtIHJlc3VsdCAtIFRoZSBoZXhhZGVjaW1hbCByZXN1bHQgdG8gZGVjb2RlLlxuICogQHJldHVybnMgVGhlIGRlY29kZWQgcmVzdWx0IGFzIHBlciB0aGUgRk5fT1VUUFVUUyBkZWZpbml0aW9uLlxuICogQGV4dGVuc2lvbiBFUkMxMTU1XG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGltcG9ydCB7IGRlY29kZUNsYWltQ29uZGl0aW9uUmVzdWx0IH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICogY29uc3QgcmVzdWx0ID0gZGVjb2RlQ2xhaW1Db25kaXRpb25SZXN1bHRSZXN1bHQoXCIuLi5cIik7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUNsYWltQ29uZGl0aW9uUmVzdWx0KHJlc3VsdCkge1xuICAgIHJldHVybiBkZWNvZGVBYmlQYXJhbWV0ZXJzKEZOX09VVFBVVFMsIHJlc3VsdCk7XG59XG4vKipcbiAqIENhbGxzIHRoZSBcImNsYWltQ29uZGl0aW9uXCIgZnVuY3Rpb24gb24gdGhlIGNvbnRyYWN0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIGNsYWltQ29uZGl0aW9uIGZ1bmN0aW9uLlxuICogQHJldHVybnMgVGhlIHBhcnNlZCByZXN1bHQgb2YgdGhlIGZ1bmN0aW9uIGNhbGwuXG4gKiBAZXh0ZW5zaW9uIEVSQzExNTVcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgY2xhaW1Db25kaXRpb24gfSBmcm9tIFwidGhpcmR3ZWIvZXh0ZW5zaW9ucy9lcmMxMTU1XCI7XG4gKlxuICogY29uc3QgcmVzdWx0ID0gYXdhaXQgY2xhaW1Db25kaXRpb24oe1xuICogIGNvbnRyYWN0LFxuICogIHRva2VuSWQ6IC4uLixcbiAqIH0pO1xuICpcbiAqIGBgYFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2xhaW1Db25kaXRpb24ob3B0aW9ucykge1xuICAgIHJldHVybiByZWFkQ29udHJhY3Qoe1xuICAgICAgICBjb250cmFjdDogb3B0aW9ucy5jb250cmFjdCxcbiAgICAgICAgbWV0aG9kOiBbRk5fU0VMRUNUT1IsIEZOX0lOUFVUUywgRk5fT1VUUFVUU10sXG4gICAgICAgIHBhcmFtczogW29wdGlvbnMudG9rZW5JZF0sXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFpbUNvbmRpdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDropSinglePhase1155/read/claimCondition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/drops/read/getActiveClaimCondition.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/extensions/erc1155/drops/read/getActiveClaimCondition.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getActiveClaimCondition: function() { return /* binding */ getActiveClaimCondition; },\n/* harmony export */   isGetActiveClaimConditionSupported: function() { return /* binding */ isGetActiveClaimConditionSupported; }\n/* harmony export */ });\n/* harmony import */ var _generated_IDrop1155_read_getActiveClaimConditionId_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../__generated__/IDrop1155/read/getActiveClaimConditionId.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/read/getActiveClaimConditionId.js\");\n/* harmony import */ var _generated_IDrop1155_read_getClaimConditionById_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../__generated__/IDrop1155/read/getClaimConditionById.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/read/getClaimConditionById.js\");\n/* harmony import */ var _generated_IDropSinglePhase1155_read_claimCondition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../__generated__/IDropSinglePhase1155/read/claimCondition.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDropSinglePhase1155/read/claimCondition.js\");\n\n\n\n/**\n * Retrieves the active claim condition.\n * This method is only available on the `DropERC1155` contract.\n * @param options - The transaction options.\n * @returns A promise that resolves to the active claim condition.\n * @throws An error if the claim condition is unsupported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { getActiveClaimCondition } from \"thirdweb/extensions/erc1155\";\n * const activeClaimCondition = await getActiveClaimCondition({ contract, tokenId });\n * ```\n */\nasync function getActiveClaimCondition(options) {\n    const getActiveClaimConditionMultiPhase = async () => {\n        const conditionId = await (0,_generated_IDrop1155_read_getActiveClaimConditionId_js__WEBPACK_IMPORTED_MODULE_0__.getActiveClaimConditionId)(options);\n        return (0,_generated_IDrop1155_read_getClaimConditionById_js__WEBPACK_IMPORTED_MODULE_1__.getClaimConditionById)({ ...options, conditionId });\n    };\n    const getActiveClaimConditionSinglePhase = async () => {\n        const [startTimestamp, maxClaimableSupply, supplyClaimed, quantityLimitPerWallet, merkleRoot, pricePerToken, currency, metadata,] = await (0,_generated_IDropSinglePhase1155_read_claimCondition_js__WEBPACK_IMPORTED_MODULE_2__.claimCondition)({ ...options, tokenId: options.tokenId });\n        return {\n            currency,\n            maxClaimableSupply,\n            merkleRoot,\n            metadata,\n            pricePerToken,\n            quantityLimitPerWallet,\n            startTimestamp,\n            supplyClaimed,\n        };\n    };\n    const results = await Promise.allSettled([\n        getActiveClaimConditionMultiPhase(),\n        getActiveClaimConditionSinglePhase(),\n    ]);\n    const condition = results.find((result) => result.status === \"fulfilled\");\n    if (condition?.status === \"fulfilled\") {\n        return condition.value;\n    }\n    throw new Error(\"Claim condition not found\");\n}\n/**\n * Checks if the `getActiveClaimCondition` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `getActiveClaimCondition` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isGetActiveClaimConditionSupported } from \"thirdweb/extensions/erc1155\";\n *\n * const supported = isGetActiveClaimConditionSupported([\"0x...\"]);\n * ```\n */\nfunction isGetActiveClaimConditionSupported(availableSelectors) {\n    return (\n    // check multi-phase\n    ((0,_generated_IDrop1155_read_getActiveClaimConditionId_js__WEBPACK_IMPORTED_MODULE_0__.isGetActiveClaimConditionIdSupported)(availableSelectors) &&\n        (0,_generated_IDrop1155_read_getClaimConditionById_js__WEBPACK_IMPORTED_MODULE_1__.isGetClaimConditionByIdSupported)(availableSelectors)) ||\n        (0,_generated_IDropSinglePhase1155_read_claimCondition_js__WEBPACK_IMPORTED_MODULE_2__.isClaimConditionSupported)(availableSelectors) // check single phase\n    );\n}\n//# sourceMappingURL=getActiveClaimCondition.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9leHRlbnNpb25zL2VyYzExNTUvZHJvcHMvcmVhZC9nZXRBY3RpdmVDbGFpbUNvbmRpdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFtSjtBQUNaO0FBQ1Y7QUFDN0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwwQkFBMEI7QUFDdEMsZ0VBQWdFLG1CQUFtQjtBQUNuRjtBQUNBO0FBQ087QUFDUDtBQUNBLGtDQUFrQyxpSEFBeUI7QUFDM0QsZUFBZSx5R0FBcUIsR0FBRyx5QkFBeUI7QUFDaEU7QUFDQTtBQUNBLGtKQUFrSixzR0FBYyxHQUFHLHNDQUFzQztBQUN6TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUNBQXFDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsS0FBSyw0SEFBb0M7QUFDekMsUUFBUSxvSEFBZ0M7QUFDeEMsUUFBUSxpSEFBeUI7QUFDakM7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9leHRlbnNpb25zL2VyYzExNTUvZHJvcHMvcmVhZC9nZXRBY3RpdmVDbGFpbUNvbmRpdGlvbi5qcz8yZGQzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldEFjdGl2ZUNsYWltQ29uZGl0aW9uSWQsIGlzR2V0QWN0aXZlQ2xhaW1Db25kaXRpb25JZFN1cHBvcnRlZCwgfSBmcm9tIFwiLi4vLi4vX19nZW5lcmF0ZWRfXy9JRHJvcDExNTUvcmVhZC9nZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkLmpzXCI7XG5pbXBvcnQgeyBnZXRDbGFpbUNvbmRpdGlvbkJ5SWQsIGlzR2V0Q2xhaW1Db25kaXRpb25CeUlkU3VwcG9ydGVkLCB9IGZyb20gXCIuLi8uLi9fX2dlbmVyYXRlZF9fL0lEcm9wMTE1NS9yZWFkL2dldENsYWltQ29uZGl0aW9uQnlJZC5qc1wiO1xuaW1wb3J0IHsgY2xhaW1Db25kaXRpb24sIGlzQ2xhaW1Db25kaXRpb25TdXBwb3J0ZWQsIH0gZnJvbSBcIi4uLy4uL19fZ2VuZXJhdGVkX18vSURyb3BTaW5nbGVQaGFzZTExNTUvcmVhZC9jbGFpbUNvbmRpdGlvbi5qc1wiO1xuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGFjdGl2ZSBjbGFpbSBjb25kaXRpb24uXG4gKiBUaGlzIG1ldGhvZCBpcyBvbmx5IGF2YWlsYWJsZSBvbiB0aGUgYERyb3BFUkMxMTU1YCBjb250cmFjdC5cbiAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIHRyYW5zYWN0aW9uIG9wdGlvbnMuXG4gKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgYWN0aXZlIGNsYWltIGNvbmRpdGlvbi5cbiAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlIGNsYWltIGNvbmRpdGlvbiBpcyB1bnN1cHBvcnRlZC5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBnZXRBY3RpdmVDbGFpbUNvbmRpdGlvbiB9IGZyb20gXCJ0aGlyZHdlYi9leHRlbnNpb25zL2VyYzExNTVcIjtcbiAqIGNvbnN0IGFjdGl2ZUNsYWltQ29uZGl0aW9uID0gYXdhaXQgZ2V0QWN0aXZlQ2xhaW1Db25kaXRpb24oeyBjb250cmFjdCwgdG9rZW5JZCB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWN0aXZlQ2xhaW1Db25kaXRpb24ob3B0aW9ucykge1xuICAgIGNvbnN0IGdldEFjdGl2ZUNsYWltQ29uZGl0aW9uTXVsdGlQaGFzZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgY29uZGl0aW9uSWQgPSBhd2FpdCBnZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gZ2V0Q2xhaW1Db25kaXRpb25CeUlkKHsgLi4ub3B0aW9ucywgY29uZGl0aW9uSWQgfSk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRBY3RpdmVDbGFpbUNvbmRpdGlvblNpbmdsZVBoYXNlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBbc3RhcnRUaW1lc3RhbXAsIG1heENsYWltYWJsZVN1cHBseSwgc3VwcGx5Q2xhaW1lZCwgcXVhbnRpdHlMaW1pdFBlcldhbGxldCwgbWVya2xlUm9vdCwgcHJpY2VQZXJUb2tlbiwgY3VycmVuY3ksIG1ldGFkYXRhLF0gPSBhd2FpdCBjbGFpbUNvbmRpdGlvbih7IC4uLm9wdGlvbnMsIHRva2VuSWQ6IG9wdGlvbnMudG9rZW5JZCB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGN1cnJlbmN5LFxuICAgICAgICAgICAgbWF4Q2xhaW1hYmxlU3VwcGx5LFxuICAgICAgICAgICAgbWVya2xlUm9vdCxcbiAgICAgICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAgICAgcHJpY2VQZXJUb2tlbixcbiAgICAgICAgICAgIHF1YW50aXR5TGltaXRQZXJXYWxsZXQsXG4gICAgICAgICAgICBzdGFydFRpbWVzdGFtcCxcbiAgICAgICAgICAgIHN1cHBseUNsYWltZWQsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGxTZXR0bGVkKFtcbiAgICAgICAgZ2V0QWN0aXZlQ2xhaW1Db25kaXRpb25NdWx0aVBoYXNlKCksXG4gICAgICAgIGdldEFjdGl2ZUNsYWltQ29uZGl0aW9uU2luZ2xlUGhhc2UoKSxcbiAgICBdKTtcbiAgICBjb25zdCBjb25kaXRpb24gPSByZXN1bHRzLmZpbmQoKHJlc3VsdCkgPT4gcmVzdWx0LnN0YXR1cyA9PT0gXCJmdWxmaWxsZWRcIik7XG4gICAgaWYgKGNvbmRpdGlvbj8uc3RhdHVzID09PSBcImZ1bGZpbGxlZFwiKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24udmFsdWU7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIkNsYWltIGNvbmRpdGlvbiBub3QgZm91bmRcIik7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgYGdldEFjdGl2ZUNsYWltQ29uZGl0aW9uYCBtZXRob2QgaXMgc3VwcG9ydGVkIGJ5IHRoZSBnaXZlbiBjb250cmFjdC5cbiAqIEBwYXJhbSBhdmFpbGFibGVTZWxlY3RvcnMgQW4gYXJyYXkgb2YgNGJ5dGUgZnVuY3Rpb24gc2VsZWN0b3JzIG9mIHRoZSBjb250cmFjdC4gWW91IGNhbiBnZXQgdGhpcyBpbiB2YXJpb3VzIHdheXMsIHN1Y2ggYXMgdXNpbmcgXCJ3aGF0c2FiaVwiIG9yIGlmIHlvdSBoYXZlIHRoZSBBQkkgb2YgdGhlIGNvbnRyYWN0IGF2YWlsYWJsZSB5b3UgY2FuIHVzZSBpdCB0byBnZW5lcmF0ZSB0aGUgc2VsZWN0b3JzLlxuICogQHJldHVybnMgQSBib29sZWFuIGluZGljYXRpbmcgaWYgdGhlIGBnZXRBY3RpdmVDbGFpbUNvbmRpdGlvbmAgbWV0aG9kIGlzIHN1cHBvcnRlZC5cbiAqIEBleHRlbnNpb24gRVJDMTE1NVxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBpc0dldEFjdGl2ZUNsYWltQ29uZGl0aW9uU3VwcG9ydGVkIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICpcbiAqIGNvbnN0IHN1cHBvcnRlZCA9IGlzR2V0QWN0aXZlQ2xhaW1Db25kaXRpb25TdXBwb3J0ZWQoW1wiMHguLi5cIl0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0dldEFjdGl2ZUNsYWltQ29uZGl0aW9uU3VwcG9ydGVkKGF2YWlsYWJsZVNlbGVjdG9ycykge1xuICAgIHJldHVybiAoXG4gICAgLy8gY2hlY2sgbXVsdGktcGhhc2VcbiAgICAoaXNHZXRBY3RpdmVDbGFpbUNvbmRpdGlvbklkU3VwcG9ydGVkKGF2YWlsYWJsZVNlbGVjdG9ycykgJiZcbiAgICAgICAgaXNHZXRDbGFpbUNvbmRpdGlvbkJ5SWRTdXBwb3J0ZWQoYXZhaWxhYmxlU2VsZWN0b3JzKSkgfHxcbiAgICAgICAgaXNDbGFpbUNvbmRpdGlvblN1cHBvcnRlZChhdmFpbGFibGVTZWxlY3RvcnMpIC8vIGNoZWNrIHNpbmdsZSBwaGFzZVxuICAgICk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRBY3RpdmVDbGFpbUNvbmRpdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/drops/read/getActiveClaimCondition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/drops/write/claimTo.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/extensions/erc1155/drops/write/claimTo.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   claimTo: function() { return /* binding */ claimTo; },\n/* harmony export */   isClaimToSupported: function() { return /* binding */ isClaimToSupported; }\n/* harmony export */ });\n/* harmony import */ var _utils_extensions_drops_get_claim_params_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../utils/extensions/drops/get-claim-params.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/extensions/drops/get-claim-params.js\");\n/* harmony import */ var _common_read_getContractMetadata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../common/read/getContractMetadata.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/common/__generated__/IContractMetadata/read/contractURI.js\");\n/* harmony import */ var _generated_IDrop1155_write_claim_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../__generated__/IDrop1155/write/claim.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDrop1155/write/claim.js\");\n/* harmony import */ var _generated_IDropSinglePhase1155_read_claimCondition_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../__generated__/IDropSinglePhase1155/read/claimCondition.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/__generated__/IDropSinglePhase1155/read/claimCondition.js\");\n/* harmony import */ var _read_getActiveClaimCondition_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../read/getActiveClaimCondition.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/drops/read/getActiveClaimCondition.js\");\n\n\n\n\n\n/**\n * Claim ERC1155 NFTs to a specified address\n * This method is only available on the `DropERC1155` contract.\n * @param options - The options for the transaction\n * @extension ERC1155\n * @example\n * ### Basic usage\n * ```ts\n * import { claimTo } from \"thirdweb/extensions/erc1155\";\n * import { sendTransaction } from \"thirdweb\";\n *\n * const transaction = claimTo({\n *   contract,\n *   to: \"0x...\",\n *   tokenId: 0n,\n *   quantity: 1n,\n * });\n *\n * await sendTransaction({ transaction, account });\n * ```\n *\n * ### For Drops with allowlists\n * You need to specify the claimer address as the `from` param to avoid any issue with the allowlist\n * ```ts\n * const transaction = claimTo({\n *   contract,\n *   to: \"0x...\",\n *   tokenId: 0n,\n *   quantity: 1n,\n *   from: \"0x...\", // address of the one claiming\n * });\n * ```\n * @throws If no claim condition is set\n * @returns The prepared transaction\n */\nfunction claimTo(options) {\n    return _generated_IDrop1155_write_claim_js__WEBPACK_IMPORTED_MODULE_0__.claim({\n        async asyncParams() {\n            const params = await (0,_utils_extensions_drops_get_claim_params_js__WEBPACK_IMPORTED_MODULE_1__.getClaimParams)({\n                contract: options.contract,\n                from: options.from,\n                quantity: options.quantity,\n                singlePhaseDrop: options.singlePhaseDrop,\n                to: options.to,\n                tokenId: options.tokenId,\n                type: \"erc1155\",\n            });\n            return {\n                ...params,\n                tokenId: options.tokenId,\n            };\n        },\n        contract: options.contract,\n    });\n}\n/**\n * Checks if the `claimTo` method is supported by the given contract.\n * @param availableSelectors An array of 4byte function selectors of the contract. You can get this in various ways, such as using \"whatsabi\" or if you have the ABI of the contract available you can use it to generate the selectors.\n * @returns A boolean indicating if the `claimTo` method is supported.\n * @extension ERC1155\n * @example\n * ```ts\n * import { isClaimToSupported } from \"thirdweb/extensions/erc1155\";\n *\n * const supported = isClaimToSupported([\"0x...\"]);\n * ```\n */\nfunction isClaimToSupported(availableSelectors) {\n    return [\n        // has to support the claim method\n        _generated_IDrop1155_write_claim_js__WEBPACK_IMPORTED_MODULE_0__.isClaimSupported(availableSelectors),\n        // requires contractMetadata for claimer proofs\n        (0,_common_read_getContractMetadata_js__WEBPACK_IMPORTED_MODULE_2__.isContractURISupported)(availableSelectors),\n        // required to check if the contract supports the getActiveClaimCondition method\n        (0,_read_getActiveClaimCondition_js__WEBPACK_IMPORTED_MODULE_3__.isGetActiveClaimConditionSupported)(availableSelectors) ||\n            (0,_generated_IDropSinglePhase1155_read_claimCondition_js__WEBPACK_IMPORTED_MODULE_4__.isClaimConditionSupported)(availableSelectors),\n    ].every(Boolean);\n}\n//# sourceMappingURL=claimTo.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS9leHRlbnNpb25zL2VyYzExNTUvZHJvcHMvd3JpdGUvY2xhaW1Uby5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXdGO0FBQ0s7QUFDZDtBQUM2QjtBQUNwQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCLFlBQVksa0JBQWtCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLDJCQUEyQixzQkFBc0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsV0FBVyxzRUFBb0I7QUFDL0I7QUFDQSxpQ0FBaUMsMkZBQWM7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUJBQXFCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsUUFBUSxpRkFBK0I7QUFDdkM7QUFDQSxRQUFRLDJGQUE4QjtBQUN0QztBQUNBLFFBQVEsb0dBQWtDO0FBQzFDLFlBQVksaUhBQXlCO0FBQ3JDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvdGhpcmR3ZWIvZGlzdC9lc20vZXh0ZW5zaW9ucy9lcmMxMTU1L2Ryb3BzL3dyaXRlL2NsYWltVG8uanM/ODI4NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRDbGFpbVBhcmFtcyB9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9leHRlbnNpb25zL2Ryb3BzL2dldC1jbGFpbS1wYXJhbXMuanNcIjtcbmltcG9ydCB7IGlzR2V0Q29udHJhY3RNZXRhZGF0YVN1cHBvcnRlZCB9IGZyb20gXCIuLi8uLi8uLi9jb21tb24vcmVhZC9nZXRDb250cmFjdE1ldGFkYXRhLmpzXCI7XG5pbXBvcnQgKiBhcyBHZW5lcmF0ZWRDbGFpbSBmcm9tIFwiLi4vLi4vX19nZW5lcmF0ZWRfXy9JRHJvcDExNTUvd3JpdGUvY2xhaW0uanNcIjtcbmltcG9ydCB7IGlzQ2xhaW1Db25kaXRpb25TdXBwb3J0ZWQgfSBmcm9tIFwiLi4vLi4vX19nZW5lcmF0ZWRfXy9JRHJvcFNpbmdsZVBoYXNlMTE1NS9yZWFkL2NsYWltQ29uZGl0aW9uLmpzXCI7XG5pbXBvcnQgeyBpc0dldEFjdGl2ZUNsYWltQ29uZGl0aW9uU3VwcG9ydGVkIH0gZnJvbSBcIi4uL3JlYWQvZ2V0QWN0aXZlQ2xhaW1Db25kaXRpb24uanNcIjtcbi8qKlxuICogQ2xhaW0gRVJDMTE1NSBORlRzIHRvIGEgc3BlY2lmaWVkIGFkZHJlc3NcbiAqIFRoaXMgbWV0aG9kIGlzIG9ubHkgYXZhaWxhYmxlIG9uIHRoZSBgRHJvcEVSQzExNTVgIGNvbnRyYWN0LlxuICogQHBhcmFtIG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgdGhlIHRyYW5zYWN0aW9uXG4gKiBAZXh0ZW5zaW9uIEVSQzExNTVcbiAqIEBleGFtcGxlXG4gKiAjIyMgQmFzaWMgdXNhZ2VcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBjbGFpbVRvIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICogaW1wb3J0IHsgc2VuZFRyYW5zYWN0aW9uIH0gZnJvbSBcInRoaXJkd2ViXCI7XG4gKlxuICogY29uc3QgdHJhbnNhY3Rpb24gPSBjbGFpbVRvKHtcbiAqICAgY29udHJhY3QsXG4gKiAgIHRvOiBcIjB4Li4uXCIsXG4gKiAgIHRva2VuSWQ6IDBuLFxuICogICBxdWFudGl0eTogMW4sXG4gKiB9KTtcbiAqXG4gKiBhd2FpdCBzZW5kVHJhbnNhY3Rpb24oeyB0cmFuc2FjdGlvbiwgYWNjb3VudCB9KTtcbiAqIGBgYFxuICpcbiAqICMjIyBGb3IgRHJvcHMgd2l0aCBhbGxvd2xpc3RzXG4gKiBZb3UgbmVlZCB0byBzcGVjaWZ5IHRoZSBjbGFpbWVyIGFkZHJlc3MgYXMgdGhlIGBmcm9tYCBwYXJhbSB0byBhdm9pZCBhbnkgaXNzdWUgd2l0aCB0aGUgYWxsb3dsaXN0XG4gKiBgYGB0c1xuICogY29uc3QgdHJhbnNhY3Rpb24gPSBjbGFpbVRvKHtcbiAqICAgY29udHJhY3QsXG4gKiAgIHRvOiBcIjB4Li4uXCIsXG4gKiAgIHRva2VuSWQ6IDBuLFxuICogICBxdWFudGl0eTogMW4sXG4gKiAgIGZyb206IFwiMHguLi5cIiwgLy8gYWRkcmVzcyBvZiB0aGUgb25lIGNsYWltaW5nXG4gKiB9KTtcbiAqIGBgYFxuICogQHRocm93cyBJZiBubyBjbGFpbSBjb25kaXRpb24gaXMgc2V0XG4gKiBAcmV0dXJucyBUaGUgcHJlcGFyZWQgdHJhbnNhY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsYWltVG8ob3B0aW9ucykge1xuICAgIHJldHVybiBHZW5lcmF0ZWRDbGFpbS5jbGFpbSh7XG4gICAgICAgIGFzeW5jIGFzeW5jUGFyYW1zKCkge1xuICAgICAgICAgICAgY29uc3QgcGFyYW1zID0gYXdhaXQgZ2V0Q2xhaW1QYXJhbXMoe1xuICAgICAgICAgICAgICAgIGNvbnRyYWN0OiBvcHRpb25zLmNvbnRyYWN0LFxuICAgICAgICAgICAgICAgIGZyb206IG9wdGlvbnMuZnJvbSxcbiAgICAgICAgICAgICAgICBxdWFudGl0eTogb3B0aW9ucy5xdWFudGl0eSxcbiAgICAgICAgICAgICAgICBzaW5nbGVQaGFzZURyb3A6IG9wdGlvbnMuc2luZ2xlUGhhc2VEcm9wLFxuICAgICAgICAgICAgICAgIHRvOiBvcHRpb25zLnRvLFxuICAgICAgICAgICAgICAgIHRva2VuSWQ6IG9wdGlvbnMudG9rZW5JZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImVyYzExNTVcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgICAgICAgICAgdG9rZW5JZDogb3B0aW9ucy50b2tlbklkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJhY3Q6IG9wdGlvbnMuY29udHJhY3QsXG4gICAgfSk7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgYGNsYWltVG9gIG1ldGhvZCBpcyBzdXBwb3J0ZWQgYnkgdGhlIGdpdmVuIGNvbnRyYWN0LlxuICogQHBhcmFtIGF2YWlsYWJsZVNlbGVjdG9ycyBBbiBhcnJheSBvZiA0Ynl0ZSBmdW5jdGlvbiBzZWxlY3RvcnMgb2YgdGhlIGNvbnRyYWN0LiBZb3UgY2FuIGdldCB0aGlzIGluIHZhcmlvdXMgd2F5cywgc3VjaCBhcyB1c2luZyBcIndoYXRzYWJpXCIgb3IgaWYgeW91IGhhdmUgdGhlIEFCSSBvZiB0aGUgY29udHJhY3QgYXZhaWxhYmxlIHlvdSBjYW4gdXNlIGl0IHRvIGdlbmVyYXRlIHRoZSBzZWxlY3RvcnMuXG4gKiBAcmV0dXJucyBBIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGUgYGNsYWltVG9gIG1ldGhvZCBpcyBzdXBwb3J0ZWQuXG4gKiBAZXh0ZW5zaW9uIEVSQzExNTVcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgaXNDbGFpbVRvU3VwcG9ydGVkIH0gZnJvbSBcInRoaXJkd2ViL2V4dGVuc2lvbnMvZXJjMTE1NVwiO1xuICpcbiAqIGNvbnN0IHN1cHBvcnRlZCA9IGlzQ2xhaW1Ub1N1cHBvcnRlZChbXCIweC4uLlwiXSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2xhaW1Ub1N1cHBvcnRlZChhdmFpbGFibGVTZWxlY3RvcnMpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICAvLyBoYXMgdG8gc3VwcG9ydCB0aGUgY2xhaW0gbWV0aG9kXG4gICAgICAgIEdlbmVyYXRlZENsYWltLmlzQ2xhaW1TdXBwb3J0ZWQoYXZhaWxhYmxlU2VsZWN0b3JzKSxcbiAgICAgICAgLy8gcmVxdWlyZXMgY29udHJhY3RNZXRhZGF0YSBmb3IgY2xhaW1lciBwcm9vZnNcbiAgICAgICAgaXNHZXRDb250cmFjdE1ldGFkYXRhU3VwcG9ydGVkKGF2YWlsYWJsZVNlbGVjdG9ycyksXG4gICAgICAgIC8vIHJlcXVpcmVkIHRvIGNoZWNrIGlmIHRoZSBjb250cmFjdCBzdXBwb3J0cyB0aGUgZ2V0QWN0aXZlQ2xhaW1Db25kaXRpb24gbWV0aG9kXG4gICAgICAgIGlzR2V0QWN0aXZlQ2xhaW1Db25kaXRpb25TdXBwb3J0ZWQoYXZhaWxhYmxlU2VsZWN0b3JzKSB8fFxuICAgICAgICAgICAgaXNDbGFpbUNvbmRpdGlvblN1cHBvcnRlZChhdmFpbGFibGVTZWxlY3RvcnMpLFxuICAgIF0uZXZlcnkoQm9vbGVhbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFpbVRvLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/drops/write/claimTo.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/extensions/drops/get-claim-params.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/utils/extensions/drops/get-claim-params.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getClaimParams: function() { return /* binding */ getClaimParams; }\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(app-pages-browser)/./node_modules/viem/_esm/constants/number.js\");\n/* harmony import */ var _constants_addresses_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../constants/addresses.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/constants/addresses.js\");\n/* harmony import */ var _extensions_common_read_getContractMetadata_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../extensions/common/read/getContractMetadata.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/common/read/getContractMetadata.js\");\n\n\n\n/**\n * Get the claim parameters for a given drop\n * @param options - The options for getting the claim parameters\n * @returns The claim parameters\n * @example\n * ```ts\n * import { getClaimParams } from \"thirdweb/utils\";\n *\n * const claimParams = await getClaimParams({\n *  contract,\n *  to: \"0x...\",\n *  quantity: 1n,\n *  type: \"erc1155\",\n *  tokenId: 0n,\n * });\n * ```\n * @utils\n */\nasync function getClaimParams(options) {\n    const cc = await (async () => {\n        if (options.type === \"erc1155\") {\n            // lazy-load the getActiveClaimCondition function\n            const { getActiveClaimCondition } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc1155_drops_read_getActiveClai-539f38\").then(__webpack_require__.bind(__webpack_require__, /*! ../../../extensions/erc1155/drops/read/getActiveClaimCondition.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc1155/drops/read/getActiveClaimCondition.js\"));\n            return await getActiveClaimCondition({\n                contract: options.contract,\n                tokenId: options.tokenId,\n            });\n        }\n        if (options.type === \"erc721\") {\n            // lazy-load the getActiveClaimCondition function\n            if (options.singlePhaseDrop) {\n                const { claimCondition } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc721___generated___IDropSingle-3c14fc\").then(__webpack_require__.bind(__webpack_require__, /*! ../../../extensions/erc721/__generated__/IDropSinglePhase/read/claimCondition.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc721/__generated__/IDropSinglePhase/read/claimCondition.js\"));\n                return await claimCondition({\n                    contract: options.contract,\n                });\n            }\n            const { getActiveClaimCondition } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc721_drops_read_getActiveClaim-07008f\").then(__webpack_require__.bind(__webpack_require__, /*! ../../../extensions/erc721/drops/read/getActiveClaimCondition.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc721/drops/read/getActiveClaimCondition.js\"));\n            return await getActiveClaimCondition({\n                contract: options.contract,\n            });\n        }\n        // otherwise erc20 case!\n        // lazy-load the getActiveClaimCondition function\n        if (options.singlePhaseDrop) {\n            // same ABI as erc721\n            const { claimCondition } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc721___generated___IDropSingle-3c14fc\").then(__webpack_require__.bind(__webpack_require__, /*! ../../../extensions/erc721/__generated__/IDropSinglePhase/read/claimCondition.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc721/__generated__/IDropSinglePhase/read/claimCondition.js\"));\n            return await claimCondition({\n                contract: options.contract,\n            });\n        }\n        const { getActiveClaimCondition } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_extensions_erc20_drops_read_getActiveClaimC-b03e3b\").then(__webpack_require__.bind(__webpack_require__, /*! ../../../extensions/erc20/drops/read/getActiveClaimCondition.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/extensions/erc20/drops/read/getActiveClaimCondition.js\"));\n        return await getActiveClaimCondition({\n            contract: options.contract,\n        });\n    })();\n    const tokenDecimals = options.type === \"erc20\" ? options.tokenDecimals : 0; // nfts have no decimals\n    // compute the allowListProof in an iife\n    const allowlistProof = await (async () => {\n        // early exit if no merkle root is set\n        if (!cc.merkleRoot || cc.merkleRoot === (0,viem__WEBPACK_IMPORTED_MODULE_0__.padHex)(\"0x\", { size: 32 })) {\n            return {\n                currency: _constants_addresses_js__WEBPACK_IMPORTED_MODULE_1__.ZERO_ADDRESS,\n                pricePerToken: viem__WEBPACK_IMPORTED_MODULE_2__.maxUint256,\n                proof: [],\n                quantityLimitPerWallet: 0n,\n            };\n        }\n        // lazy-load the fetchProofsForClaimer function if we need it\n        const { fetchProofsForClaimer } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_utils_extensions_drops_fetch-proofs-for-cla-b21589\").then(__webpack_require__.bind(__webpack_require__, /*! ./fetch-proofs-for-claimers.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/extensions/drops/fetch-proofs-for-claimers.js\"));\n        // 1. fetch merkle data from contract URI\n        const metadata = await (0,_extensions_common_read_getContractMetadata_js__WEBPACK_IMPORTED_MODULE_3__.getContractMetadata)({\n            contract: options.contract,\n        });\n        const merkleData = metadata.merkle || {};\n        const snapshotUri = merkleData[cc.merkleRoot];\n        if (!snapshotUri) {\n            return {\n                currency: _constants_addresses_js__WEBPACK_IMPORTED_MODULE_1__.ZERO_ADDRESS,\n                pricePerToken: viem__WEBPACK_IMPORTED_MODULE_2__.maxUint256,\n                proof: [],\n                quantityLimitPerWallet: 0n,\n            };\n        }\n        const allowListProof = await fetchProofsForClaimer({\n            claimer: options.from || options.to,\n            contract: options.contract, // receiver and claimer can be different, always prioritize the claimer for allowlists\n            merkleTreeUri: snapshotUri,\n            tokenDecimals,\n        });\n        // if no proof is found, we'll try the empty proof\n        if (!allowListProof) {\n            return {\n                currency: _constants_addresses_js__WEBPACK_IMPORTED_MODULE_1__.ZERO_ADDRESS,\n                pricePerToken: viem__WEBPACK_IMPORTED_MODULE_2__.maxUint256,\n                proof: [],\n                quantityLimitPerWallet: 0n,\n            };\n        }\n        // otherwise return the proof\n        return allowListProof;\n    })();\n    // currency and price need to match the allowlist proof if set\n    // if default values in the allowlist proof, fallback to the claim condition\n    const currency = allowlistProof.currency && allowlistProof.currency !== _constants_addresses_js__WEBPACK_IMPORTED_MODULE_1__.ZERO_ADDRESS\n        ? allowlistProof.currency\n        : cc.currency;\n    const pricePerToken = allowlistProof.pricePerToken !== undefined &&\n        allowlistProof.pricePerToken !== viem__WEBPACK_IMPORTED_MODULE_2__.maxUint256\n        ? allowlistProof.pricePerToken\n        : cc.pricePerToken;\n    const totalPrice = (pricePerToken * options.quantity) / BigInt(10 ** tokenDecimals);\n    const value = (0,_constants_addresses_js__WEBPACK_IMPORTED_MODULE_1__.isNativeTokenAddress)(currency) ? totalPrice : 0n;\n    const erc20Value = !(0,_constants_addresses_js__WEBPACK_IMPORTED_MODULE_1__.isNativeTokenAddress)(currency) && pricePerToken > 0n\n        ? {\n            amountWei: totalPrice,\n            tokenAddress: currency,\n        }\n        : undefined;\n    return {\n        allowlistProof,\n        currency,\n        data: \"0x\",\n        overrides: {\n            erc20Value,\n            value,\n        },\n        pricePerToken,\n        quantity: options.quantity,\n        receiver: options.to,\n        tokenId: options.type === \"erc1155\" ? options.tokenId : undefined,\n    };\n}\n//# sourceMappingURL=get-claim-params.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/extensions/drops/get-claim-params.js\n"));

/***/ })

}]);