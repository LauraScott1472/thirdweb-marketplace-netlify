"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_thirdweb_dist_esm_transaction_actions_encode_js"],{

/***/ "(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/encode.js":
/*!**********************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/transaction/actions/encode.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encode: function() { return /* binding */ encode; },\n/* harmony export */   getDataFromTx: function() { return /* binding */ getDataFromTx; },\n/* harmony export */   getExtraCallDataFromTx: function() { return /* binding */ getExtraCallDataFromTx; }\n/* harmony export */ });\nconst encodeWeakMap = new WeakMap();\n/**\n * Encodes a transaction object into a hexadecimal string representation of the encoded data.\n * @param transaction - The transaction object to encode.\n * @returns A promise that resolves to the encoded data as a hexadecimal string.\n * @transaction\n * @example\n * ```ts\n * import { encode } from \"thirdweb\";\n * const encodedData = await encode(transaction);\n * ```\n */\nasync function encode(transaction) {\n    if (encodeWeakMap.has(transaction)) {\n        // biome-ignore lint/style/noNonNullAssertion: the `has` above ensures that this will always be set\n        return encodeWeakMap.get(transaction);\n    }\n    const promise = (async () => {\n        const [data, extraData, { concatHex }] = await Promise.all([\n            getDataFromTx(transaction),\n            getExtraCallDataFromTx(transaction),\n            __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_thirdweb_dist_esm_utils_encoding_helpers_concat-hex_js\").then(__webpack_require__.bind(__webpack_require__, /*! ../../utils/encoding/helpers/concat-hex.js */ \"(app-pages-browser)/./node_modules/thirdweb/dist/esm/utils/encoding/helpers/concat-hex.js\")),\n        ]);\n        if (extraData) {\n            return concatHex([data, extraData]);\n        }\n        return data;\n    })();\n    encodeWeakMap.set(transaction, promise);\n    return promise;\n}\n/**\n * Get the transaction.data (from a PreparedTransaction)\n * If the transaction does not have `data`, we default to \"0x\"\n * @internal\n */\nasync function getDataFromTx(transaction) {\n    if (transaction.data === undefined) {\n        return \"0x\";\n    }\n    if (typeof transaction.data === \"function\") {\n        const data = await transaction.data();\n        if (!data) {\n            return \"0x\";\n        }\n        return data;\n    }\n    return transaction.data;\n}\n/**\n * Get the extraCallData from a PreparedTransaction\n * @internal\n * If extraCallData is \"0x\", we will return `undefined`\n * to simplify the code, since concatenating \"0x\" doesn't do anything\n */\nasync function getExtraCallDataFromTx(transaction) {\n    if (!transaction.extraCallData) {\n        return undefined;\n    }\n    if (typeof transaction.extraCallData === \"function\") {\n        const extraData = await transaction.extraCallData();\n        if (!extraData)\n            return undefined;\n        if (!extraData.startsWith(\"0x\")) {\n            throw Error(\"Invalid extra calldata - must be a hex string\");\n        }\n        if (extraData === \"0x\") {\n            return undefined;\n        }\n        return extraData;\n    }\n    if (!transaction.extraCallData.startsWith(\"0x\")) {\n        throw Error(\"Invalid extra calldata - must be a hex string\");\n    }\n    return transaction.extraCallData;\n}\n//# sourceMappingURL=encode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS90cmFuc2FjdGlvbi9hY3Rpb25zL2VuY29kZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxXQUFXO0FBQzdDO0FBQ0E7QUFDQSxZQUFZLGtVQUFvRDtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90aGlyZHdlYi9kaXN0L2VzbS90cmFuc2FjdGlvbi9hY3Rpb25zL2VuY29kZS5qcz80MWExIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGVuY29kZVdlYWtNYXAgPSBuZXcgV2Vha01hcCgpO1xuLyoqXG4gKiBFbmNvZGVzIGEgdHJhbnNhY3Rpb24gb2JqZWN0IGludG8gYSBoZXhhZGVjaW1hbCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIGVuY29kZWQgZGF0YS5cbiAqIEBwYXJhbSB0cmFuc2FjdGlvbiAtIFRoZSB0cmFuc2FjdGlvbiBvYmplY3QgdG8gZW5jb2RlLlxuICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGVuY29kZWQgZGF0YSBhcyBhIGhleGFkZWNpbWFsIHN0cmluZy5cbiAqIEB0cmFuc2FjdGlvblxuICogQGV4YW1wbGVcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBlbmNvZGUgfSBmcm9tIFwidGhpcmR3ZWJcIjtcbiAqIGNvbnN0IGVuY29kZWREYXRhID0gYXdhaXQgZW5jb2RlKHRyYW5zYWN0aW9uKTtcbiAqIGBgYFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5jb2RlKHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKGVuY29kZVdlYWtNYXAuaGFzKHRyYW5zYWN0aW9uKSkge1xuICAgICAgICAvLyBiaW9tZS1pZ25vcmUgbGludC9zdHlsZS9ub05vbk51bGxBc3NlcnRpb246IHRoZSBgaGFzYCBhYm92ZSBlbnN1cmVzIHRoYXQgdGhpcyB3aWxsIGFsd2F5cyBiZSBzZXRcbiAgICAgICAgcmV0dXJuIGVuY29kZVdlYWtNYXAuZ2V0KHRyYW5zYWN0aW9uKTtcbiAgICB9XG4gICAgY29uc3QgcHJvbWlzZSA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IFtkYXRhLCBleHRyYURhdGEsIHsgY29uY2F0SGV4IH1dID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgZ2V0RGF0YUZyb21UeCh0cmFuc2FjdGlvbiksXG4gICAgICAgICAgICBnZXRFeHRyYUNhbGxEYXRhRnJvbVR4KHRyYW5zYWN0aW9uKSxcbiAgICAgICAgICAgIGltcG9ydChcIi4uLy4uL3V0aWxzL2VuY29kaW5nL2hlbHBlcnMvY29uY2F0LWhleC5qc1wiKSxcbiAgICAgICAgXSk7XG4gICAgICAgIGlmIChleHRyYURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25jYXRIZXgoW2RhdGEsIGV4dHJhRGF0YV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pKCk7XG4gICAgZW5jb2RlV2Vha01hcC5zZXQodHJhbnNhY3Rpb24sIHByb21pc2UpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuLyoqXG4gKiBHZXQgdGhlIHRyYW5zYWN0aW9uLmRhdGEgKGZyb20gYSBQcmVwYXJlZFRyYW5zYWN0aW9uKVxuICogSWYgdGhlIHRyYW5zYWN0aW9uIGRvZXMgbm90IGhhdmUgYGRhdGFgLCB3ZSBkZWZhdWx0IHRvIFwiMHhcIlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREYXRhRnJvbVR4KHRyYW5zYWN0aW9uKSB7XG4gICAgaWYgKHRyYW5zYWN0aW9uLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gXCIweFwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRyYW5zYWN0aW9uLmRhdGEgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdHJhbnNhY3Rpb24uZGF0YSgpO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBcIjB4XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHJldHVybiB0cmFuc2FjdGlvbi5kYXRhO1xufVxuLyoqXG4gKiBHZXQgdGhlIGV4dHJhQ2FsbERhdGEgZnJvbSBhIFByZXBhcmVkVHJhbnNhY3Rpb25cbiAqIEBpbnRlcm5hbFxuICogSWYgZXh0cmFDYWxsRGF0YSBpcyBcIjB4XCIsIHdlIHdpbGwgcmV0dXJuIGB1bmRlZmluZWRgXG4gKiB0byBzaW1wbGlmeSB0aGUgY29kZSwgc2luY2UgY29uY2F0ZW5hdGluZyBcIjB4XCIgZG9lc24ndCBkbyBhbnl0aGluZ1xuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RXh0cmFDYWxsRGF0YUZyb21UeCh0cmFuc2FjdGlvbikge1xuICAgIGlmICghdHJhbnNhY3Rpb24uZXh0cmFDYWxsRGF0YSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHRyYW5zYWN0aW9uLmV4dHJhQ2FsbERhdGEgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCBleHRyYURhdGEgPSBhd2FpdCB0cmFuc2FjdGlvbi5leHRyYUNhbGxEYXRhKCk7XG4gICAgICAgIGlmICghZXh0cmFEYXRhKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKCFleHRyYURhdGEuc3RhcnRzV2l0aChcIjB4XCIpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgZXh0cmEgY2FsbGRhdGEgLSBtdXN0IGJlIGEgaGV4IHN0cmluZ1wiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXh0cmFEYXRhID09PSBcIjB4XCIpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4dHJhRGF0YTtcbiAgICB9XG4gICAgaWYgKCF0cmFuc2FjdGlvbi5leHRyYUNhbGxEYXRhLnN0YXJ0c1dpdGgoXCIweFwiKSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcIkludmFsaWQgZXh0cmEgY2FsbGRhdGEgLSBtdXN0IGJlIGEgaGV4IHN0cmluZ1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLmV4dHJhQ2FsbERhdGE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmNvZGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/thirdweb/dist/esm/transaction/actions/encode.js\n"));

/***/ })

}]);